import keyboard
from PIL import Image, ImageGrab, ImageEnhance, ImageFilter
import pytesseract
import pyperclip
import tkinter as tk
from tkinter import font as tkFont, messagebox, simpledialog
from threading import Thread
import ctypes
import time
import configparser
import sys
import os
from pystray import MenuItem as item, Icon
import numpy as np

# Import license client
try:
    from license_client import LicenseManager
    LICENSE_ENABLED = True
except ImportError:
    print("‚ö†Ô∏è License module not found. Running in trial mode.")
    LICENSE_ENABLED = False

# --- C·∫§U H√åNH ---

APP_NAME = "VietnameseOCRTool" 
CONFIG_DIR = os.path.join(os.getenv('LOCALAPPDATA'), APP_NAME) 
os.makedirs(CONFIG_DIR, exist_ok=True) 
CONFIG_FILE = os.path.join(CONFIG_DIR, 'config.ini')
ICON_FILE = 'icon.png'

def get_tesseract_path():
    """T√¨m ƒë∆∞·ªùng d·∫´n ƒë·∫øn tesseract.exe m·ªôt c√°ch linh ƒë·ªông."""
    if getattr(sys, 'frozen', False):
        application_path = os.path.dirname(sys.executable)
        tesseract_path = os.path.join(application_path, 'Tesseract-OCR', 'tesseract.exe')
    else:
        tesseract_path = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
    
    print(f"ƒê∆∞·ªùng d·∫´n Tesseract ƒë∆∞·ª£c s·ª≠ d·ª•ng: {tesseract_path}")
    return tesseract_path

try:
    pytesseract.pytesseract.tesseract_cmd = get_tesseract_path()
except Exception as e:
    print(f"L·ªói khi thi·∫øt l·∫≠p Tesseract: {e}")

# --- BI·∫æN TO√ÄN C·ª§C ---
current_hotkey = None
hotkey_handle = None
app_icon = None
license_manager = None
is_licensed = False

# ==============================================================================
# LICENSE MANAGEMENT
# ==============================================================================

def check_license():
    """Ki·ªÉm tra license khi kh·ªüi ƒë·ªông"""
    global license_manager, is_licensed
    
    if not LICENSE_ENABLED:
        print("‚ö†Ô∏è License system disabled. Running in trial mode.")
        return True
    
    license_manager = LicenseManager()
    
    # Ki·ªÉm tra license hi·ªán t·∫°i
    is_valid, message = license_manager.check_license_status()
    
    if is_valid:
        print(f"‚úÖ {message}")
        is_licensed = True
        return True
    else:
        print(f"‚ùå {message}")
        is_licensed = False
        return False

def show_license_activation_dialog():
    """Hi·ªÉn th·ªã dialog y√™u c·∫ßu nh·∫≠p license key"""
    root = tk.Tk()
    root.withdraw()
    
    while True:
        license_key = simpledialog.askstring(
            "License Activation",
            "Vui l√≤ng nh·∫≠p License Key c·ªßa b·∫°n:\n(Format: XXXX-XXXX-XXXX-XXXX)",
            parent=root
        )
        
        if license_key is None:
            # User clicked Cancel
            response = messagebox.askyesno(
                "Tho√°t",
                "·ª®ng d·ª•ng c·∫ßn license key ƒë·ªÉ ch·∫°y.\nB·∫°n c√≥ mu·ªën tho√°t kh√¥ng?",
                parent=root
            )
            if response:
                root.destroy()
                return False
            else:
                continue
        
        # Validate license
        print(f"\n‚è≥ ƒêang x√°c th·ª±c license: {license_key}")
        result = license_manager.activate_license(license_key)
        
        if result.get('valid'):
            messagebox.showinfo(
                "Th√†nh c√¥ng",
                f"‚úÖ License ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng!\n\n"
                f"G√≥i: {result.get('plan', 'N/A').upper()}\n"
                f"H·∫øt h·∫°n: {result.get('expires', 'Vƒ©nh vi·ªÖn')}",
                parent=root
            )
            root.destroy()
            global is_licensed
            is_licensed = True
            return True
        else:
            error_msg = result.get('error', 'Unknown error')
            messagebox.showerror(
                "L·ªói",
                f"‚ùå Kh√¥ng th·ªÉ k√≠ch ho·∫°t license:\n\n{error_msg}",
                parent=root
            )

def show_license_info():
    """Hi·ªÉn th·ªã th√¥ng tin license hi·ªán t·∫°i"""
    if not LICENSE_ENABLED or not license_manager:
        messagebox.showinfo("License Info", "License system is disabled.")
        return
    
    is_valid, message = license_manager.check_license_status()
    
    if is_valid:
        messagebox.showinfo("License Information", f"‚úÖ {message}")
    else:
        response = messagebox.askyesno(
            "License Invalid",
            f"‚ùå {message}\n\nB·∫°n c√≥ mu·ªën nh·∫≠p license key m·ªõi kh√¥ng?",
        )
        if response:
            show_license_activation_dialog()

def deactivate_license_action():
    """X√≥a license kh·ªèi m√°y n√†y"""
    if not LICENSE_ENABLED or not license_manager:
        messagebox.showinfo("License", "License system is disabled.")
        return
    
    response = messagebox.askyesno(
        "Deactivate License",
        "B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a license kh·ªèi m√°y n√†y?\n\n"
        "B·∫°n c√≥ th·ªÉ k√≠ch ho·∫°t l·∫°i tr√™n m√°y kh√°c sau."
    )
    
    if response:
        license_manager.deactivate_license()
        messagebox.showinfo("Success", "‚úÖ ƒê√£ x√≥a license kh·ªèi m√°y n√†y.")
        global is_licensed
        is_licensed = False

# ==============================================================================
# PH·∫¶N X·ª¨ L√ù DPI V√Ä GIAO DI·ªÜN CH·ªåN V√ôNG
# ==============================================================================

def set_dpi_awareness():
    """C·∫£i thi·ªán ƒë·ªô s·∫Øc n√©t c·ªßa giao di·ªán tr√™n m√†n h√¨nh c√≥ ƒë·ªô ph√¢n gi·∫£i cao."""
    try:
        ctypes.windll.shcore.SetProcessDpiAwareness(2)
    except Exception:
        try:
            ctypes.windll.user32.SetProcessDPIAware()
        except Exception:
            pass

# ==============================================================================
# PH·∫¶N TI·ªÄN X·ª¨ L√ù ·∫¢NH T·ªêI ∆ØU
# ==============================================================================

def preprocess_image(image):
    """Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·ªÉ t·ªëi ∆∞u h√≥a ch·∫•t l∆∞·ª£ng OCR."""
    try:
        gray_image = image.convert('L')
        width, height = gray_image.size
        scale_factor = 3
        gray_image = gray_image.resize((width * scale_factor, height * scale_factor), Image.LANCZOS)
        
        # Simple enhancement
        enhancer = ImageEnhance.Contrast(gray_image)
        enhanced = enhancer.enhance(2.0)
        
        sharpness_enhancer = ImageEnhance.Sharpness(enhanced)
        sharp_image = sharpness_enhancer.enhance(2.5)
        
        return sharp_image
        
    except Exception as e:
        print(f"‚ö† L·ªói khi ti·ªÅn x·ª≠ l√Ω ·∫£nh: {e}")
        return image.convert('L')

# ==============================================================================
# L·ªöP X·ª¨ L√ù CH·ªåN V√ôNG M√ÄN H√åNH
# ==============================================================================

class ScreenSelector:
    """L·ªõp x·ª≠ l√Ω vi·ªác v·∫Ω h√¨nh ch·ªØ nh·∫≠t tr√™n m√†n h√¨nh ƒë·ªÉ ch·ªçn v√πng OCR."""
    def __init__(self):
        self.start_x = None
        self.start_y = None
        self.root = None
        self.canvas = None
        self.rect = None

    def start(self):
        """Kh·ªüi t·∫°o v√† hi·ªÉn th·ªã c·ª≠a s·ªï ch·ªçn v√πng."""
        # Check license before allowing OCR
        if LICENSE_ENABLED and not is_licensed:
            messagebox.showerror("License Required", "Vui l√≤ng k√≠ch ho·∫°t license ƒë·ªÉ s·ª≠ d·ª•ng OCR!")
            return
        
        self.root = tk.Tk()
        self.root.attributes('-fullscreen', True)
        self.root.attributes('-alpha', 0.3)
        self.root.attributes('-topmost', True)
        self.root.configure(bg='black')
        self.canvas = tk.Canvas(self.root, bg='black', highlightthickness=0, cursor='crosshair')
        self.canvas.pack(fill=tk.BOTH, expand=True)
        self.canvas.bind('<Button-1>', self.on_press)
        self.canvas.bind('<B1-Motion>', self.on_drag)
        self.canvas.bind('<ButtonRelease-1>', self.on_release)
        self.root.bind('<Escape>', lambda e: self.cancel())
        self.root.mainloop()

    def on_press(self, event):
        """L∆∞u t·ªça ƒë·ªô khi nh·∫•n chu·ªôt."""
        self.start_x = event.x
        self.start_y = event.y

    def on_drag(self, event):
        """V·∫Ω h√¨nh ch·ªØ nh·∫≠t khi k√©o chu·ªôt."""
        if self.start_x is not None:
            if self.rect:
                self.canvas.delete(self.rect)
            self.rect = self.canvas.create_rectangle(
                self.start_x, self.start_y, event.x, event.y, outline='red', width=2)

    def on_release(self, event):
        """X·ª≠ l√Ω khi nh·∫£ chu·ªôt: ch·ª•p ·∫£nh v√† OCR."""
        end_x, end_y = event.x, event.y
        self.root.destroy()
        time.sleep(0.2)

        x1, y1 = min(self.start_x, end_x), min(self.start_y, end_y)
        x2, y2 = max(self.start_x, end_x), max(self.start_y, end_y)

        print(f"V√πng ch·ªçn: ({x1}, {y1}) ‚Üí ({x2}, {y2})")
        if x2 - x1 > 5 and y2 - y1 > 5:
            screenshot = ImageGrab.grab(bbox=(x1, y1, x2, y2))
            self.ocr(screenshot)
        else:
            print("‚ö† V√πng ch·ªçn qu√° nh·ªè!")

    def cancel(self):
        """H·ªßy thao t√°c ch·ªçn v√πng."""
        print("‚úñ ƒê√£ h·ªßy!")
        self.root.destroy()

    def ocr(self, image):
        """Th·ª±c hi·ªán nh·∫≠n d·∫°ng vƒÉn b·∫£n tr√™n ·∫£nh v·ªõi ti·ªÅn x·ª≠ l√Ω t·ªëi ∆∞u."""
        try:
            print("\n" + "="*55)
            print("‚è≥ B·∫ÆT ƒê·∫¶U QU√Å TR√åNH OCR")
            print("="*55)
            
            processed_image = preprocess_image(image)
            
            print("\nüîç ƒêang nh·∫≠n d·∫°ng vƒÉn b·∫£n...")
            
            custom_config = r'--oem 3 --psm 6'
            text = pytesseract.image_to_string(
                processed_image, 
                lang='vie',
                config=custom_config
            )
            
            text = text.strip()
            
            if text:
                pyperclip.copy(text)
                print("\n" + "="*55)
                print("‚úì HO√ÄN TH√ÄNH - ƒê√É COPY V√ÄO CLIPBOARD!")
                print("="*55)
                
                if len(text) > 200:
                    print(f"üìù N·ªôi dung (200 k√Ω t·ª± ƒë·∫ßu):\n{text[:200]}...")
                else:
                    print(f"üìù N·ªôi dung:\n{text}")
                    
                print(f"\nüìä ƒê·ªô d√†i: {len(text)} k√Ω t·ª±")
                print(f"üìÑ S·ªë d√≤ng: {text.count(chr(10)) + 1}")
                print("="*55 + "\n")
            else:
                print("\n" + "="*55)
                print("‚ö† KH√îNG NH·∫¨N DI·ªÜN ƒê∆Ø·ª¢C CH·ªÆ!")
                print("="*55 + "\n")
                
        except Exception as e:
            print(f"\n‚ùå L·ªñI KHI NH·∫¨N DI·ªÜN: {e}\n")

def trigger_ocr_selection():
    """H√†m ƒë∆∞·ª£c g·ªçi khi nh·∫•n ph√≠m t·∫Øt."""
    print(f"\n‚ñ∂ ƒê√£ nh·∫•n ph√≠m t·∫Øt '{current_hotkey}' - B·∫Øt ƒë·∫ßu ch·ªçn v√πng...")
    Thread(target=lambda: ScreenSelector().start(), daemon=True).start()

# ==============================================================================
# GIAO DI·ªÜN Y√äU C·∫¶U NH·∫¨P PH√çM T·∫ÆT
# ==============================================================================

class HotkeyPromptWindow:
    """T·∫°o m·ªôt c·ª≠a s·ªï overlay ƒë·ªÉ y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p ph√≠m t·∫Øt."""
    def __init__(self):
        self.root = tk.Tk()
        self.root.attributes('-fullscreen', True)
        self.root.attributes('-alpha', 0.75)
        self.root.attributes('-topmost', True)
        self.root.configure(bg='black')

        prompt_font = tkFont.Font(family="Arial", size=28, weight="bold")
        label = tk.Label(
            self.root,
            text="H√£y nh·∫•n t·ªï h·ª£p ph√≠m b·∫°n mu·ªën d√πng ƒë·ªÉ qu√©t",
            font=prompt_font,
            bg="black",
            fg="white"
        )
        label.place(relx=0.5, rely=0.5, anchor='center')

    def get_hotkey(self):
        """Hi·ªÉn th·ªã c·ª≠a s·ªï, ch·ªù ng∆∞·ªùi d√πng nh·∫≠p v√† tr·∫£ v·ªÅ ph√≠m t·∫Øt."""
        self.root.update()
        hotkey = keyboard.read_hotkey(suppress=False)
        self.root.destroy()
        return hotkey

# ==============================================================================
# PH·∫¶N QU·∫¢N L√ù C·∫§U H√åNH V√Ä PH√çM T·∫ÆT
# ==============================================================================

def save_hotkey(hotkey_str):
    """L∆∞u ph√≠m t·∫Øt v√†o file config.ini."""
    config = configparser.ConfigParser()
    config['Settings'] = {'hotkey': hotkey_str}
    with open(CONFIG_FILE, 'w') as configfile:
        config.write(configfile)
    print(f"‚úì ƒê√£ l∆∞u ph√≠m t·∫Øt m·ªõi: {hotkey_str}")

def load_hotkey():
    """T·∫£i ph√≠m t·∫Øt t·ª´ file config.ini."""
    if not os.path.exists(CONFIG_FILE):
        return None
    config = configparser.ConfigParser()
    config.read(CONFIG_FILE)
    return config.get('Settings', 'hotkey', fallback=None)

def prompt_for_hotkey():
    """S·ª≠ d·ª•ng HotkeyPromptWindow ƒë·ªÉ y√™u c·∫ßu ng∆∞·ªùi d√πng nh·∫≠p ph√≠m t·∫Øt."""
    print("\n" + "="*55)
    print("‚ú® VUI L√íNG ƒê·∫∂T T·ªî H·ª¢P PH√çM T·∫ÆT ‚ú®")
    print("M·ªôt c·ª≠a s·ªï s·∫Ω hi·ªán l√™n, h√£y nh·∫•n ph√≠m t·∫Øt c·ªßa b·∫°n.")
    print("="*55)

    prompt_window = HotkeyPromptWindow()
    new_hotkey = prompt_window.get_hotkey()

    print(f"\nB·∫°n ƒë√£ ch·ªçn: {new_hotkey}")
    save_hotkey(new_hotkey)
    return new_hotkey

def register_new_hotkey(new_hotkey):
    """H·ªßy ph√≠m t·∫Øt c≈© v√† ƒëƒÉng k√Ω ph√≠m t·∫Øt m·ªõi."""
    global current_hotkey, hotkey_handle
    if hotkey_handle:
        keyboard.remove_hotkey(hotkey_handle)

    current_hotkey = new_hotkey
    hotkey_handle = keyboard.add_hotkey(current_hotkey, trigger_ocr_selection)

    if app_icon:
        license_status = "‚úÖ Licensed" if is_licensed else "‚ö†Ô∏è Trial"
        app_icon.title = f"OCR Tool ({license_status}) | Hotkey: {current_hotkey}"

# ==============================================================================
# PH·∫¶N QU·∫¢N L√ù ICON TR√äN SYSTEM TRAY
# ==============================================================================

def change_hotkey_action():
    """H√†nh ƒë·ªông ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng ch·ªçn 'Thay ƒë·ªïi ph√≠m t·∫Øt'."""
    print("\nüîÑ B·∫Øt ƒë·∫ßu thay ƒë·ªïi ph√≠m t·∫Øt...")
    new_hotkey = prompt_for_hotkey()
    register_new_hotkey(new_hotkey)

def exit_action(icon):
    """H√†nh ƒë·ªông tho√°t ·ª©ng d·ª•ng."""
    print("\nüëã ƒê√£ tho√°t!")
    icon.stop()
    os._exit(0)

def setup_and_run_tray_app():
    """Thi·∫øt l·∫≠p v√† ch·∫°y icon tr√™n khay h·ªá th·ªëng."""
    global app_icon
    try:
        if getattr(sys, 'frozen', False):
            base_path = sys._MEIPASS
        else:
            base_path = os.path.abspath(".")
        icon_path = os.path.join(base_path, ICON_FILE)
        image = Image.open(icon_path)
    except FileNotFoundError:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file '{ICON_FILE}'. S·ª≠ d·ª•ng icon m·∫∑c ƒë·ªãnh.")
        image = Image.new('RGB', (64, 64), 'black')

    # T·∫°o menu v·ªõi license options
    if LICENSE_ENABLED:
        menu = (
            item('Thay ƒë·ªïi ph√≠m t·∫Øt', change_hotkey_action),
            item('License Info', show_license_info),
            item('Deactivate License', deactivate_license_action),
            item('Tho√°t', exit_action)
        )
    else:
        menu = (
            item('Thay ƒë·ªïi ph√≠m t·∫Øt', change_hotkey_action),
            item('Tho√°t', exit_action)
        )

    license_status = "‚úÖ Licensed" if is_licensed else "‚ö†Ô∏è Trial"
    app_icon = Icon("OCRTool", image, f"OCR Tool ({license_status}) | Hotkey: {current_hotkey}", menu)
    app_icon.run()

# ==============================================================================
# H√ÄM MAIN CH√çNH
# ==============================================================================

def main():
    global current_hotkey

    is_startup_run = "--startup" in sys.argv

    set_dpi_awareness()

    if not is_startup_run:
        print("=" * 55)
        print("    Vietnamese OCR Tool - Licensed Version")
        print("=" * 55)
    
    # Check license
    if LICENSE_ENABLED:
        if not check_license():
            # License invalid, show activation dialog
            if not show_license_activation_dialog():
                print("\n‚ùå Kh√¥ng c√≥ license h·ª£p l·ªá. Tho√°t ·ª©ng d·ª•ng.")
                sys.exit(1)
    
    if not is_startup_run:
        print("\nüöÄ T√≠nh nƒÉng t·ªëi ∆∞u h√≥a:")
        print("   ‚úì Grayscale conversion")
        print("   ‚úì Image upscaling 3x")
        print("   ‚úì Contrast enhancement")
        print("   ‚úì Sharpness enhancement")
        print("   ‚úì Tesseract LSTM mode")
        print("=" * 55 + "\n")

    loaded_key = load_hotkey()
    
    if not loaded_key:
        change_hotkey_action()
    else:
        current_hotkey = loaded_key
        if not is_startup_run:
            print(f"‚úì ƒê√£ t·∫£i ph√≠m t·∫Øt ƒë√£ l∆∞u: {current_hotkey}")
        register_new_hotkey(current_hotkey)

    if not is_startup_run:
        print("\nüìñ H∆∞·ªõng d·∫´n:")
        print(f"    ‚Ä¢ Nh·∫•n '{current_hotkey}' ƒë·ªÉ ch·ªçn v√πng c·∫ßn OCR")
        print("    ‚Ä¢ Nh·∫•n ESC ƒë·ªÉ h·ªßy ch·ªçn v√πng")
        print("    ‚Ä¢ Chu·ªôt ph·∫£i v√†o icon ·ªü khay h·ªá th·ªëng ƒë·ªÉ xem license")
        print("=" * 55 + "\n")
        print("üöÄ ·ª®ng d·ª•ng ƒëang ch·∫°y ·ªü ch·∫ø ƒë·ªô n·ªÅn...")

    setup_and_run_tray_app()

if __name__ == "__main__":
    main()

