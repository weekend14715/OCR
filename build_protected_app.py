"""
Build Protected Vietnamese OCR Tool
Script ƒë·ªÉ build ·ª©ng d·ª•ng v·ªõi h·ªá th·ªëng b·∫£o v·ªá n√¢ng cao
"""

import os
import sys
import subprocess
import shutil
import zipfile
from pathlib import Path

def install_dependencies():
    """C√†i ƒë·∫∑t c√°c dependencies c·∫ßn thi·∫øt"""
    print("üì¶ Installing dependencies...")
    
    dependencies = [
        'pyinstaller',
        'cryptography',
        'psutil',
        'requests',
        'numpy',
        'Pillow',
        'pytesseract',
        'keyboard',
        'pyperclip',
        'pystray'
    ]
    
    for dep in dependencies:
        try:
            subprocess.run([sys.executable, '-m', 'pip', 'install', dep], check=True)
            print(f"‚úÖ Installed {dep}")
        except subprocess.CalledProcessError:
            print(f"‚ùå Failed to install {dep}")

def obfuscate_code():
    """Obfuscate code tr∆∞·ªõc khi build"""
    print("üîí Obfuscating code...")
    
    try:
        from code_obfuscator import CodeObfuscator
        
        obfuscator = CodeObfuscator()
        
        # Obfuscate main files
        files_to_obfuscate = [
            'ocr_tool_licensed.py',
            'license_client.py',
            'protection_system.py'
        ]
        
        for file in files_to_obfuscate:
            if os.path.exists(file):
                obfuscated_file = f"obfuscated_{file}"
                if obfuscator.obfuscate_file(file, obfuscated_file):
                    print(f"‚úÖ Obfuscated {file}")
                else:
                    print(f"‚ùå Failed to obfuscate {file}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Obfuscation failed: {e}")
        return False

def create_protected_spec():
    """T·∫°o PyInstaller spec file cho ·ª©ng d·ª•ng ƒë∆∞·ª£c b·∫£o v·ªá"""
    print("üìù Creating protected spec file...")
    
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['obfuscated_ocr_tool_licensed.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('Tesseract-OCR', 'Tesseract-OCR'),
        ('icon.png', '.'),
        ('obfuscated_license_client.py', '.'),
        ('obfuscated_protection_system.py', '.'),
    ],
    hiddenimports=[
        'protection_system',
        'license_client',
        'pytesseract',
        'PIL',
        'keyboard',
        'pyperclip',
        'pystray',
        'numpy',
        'cryptography',
        'psutil',
        'requests',
        'hmac',
        'base64',
        'zlib',
        'marshal',
        'types',
        'threading',
        'ctypes',
        'subprocess',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='VietnameseOCRTool_Protected',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='icon.png'
)
'''
    
    with open('VietnameseOCRTool_Protected.spec', 'w') as f:
        f.write(spec_content)
    
    print("‚úÖ Created protected spec file")
    return True

def build_executable():
    """Build executable v·ªõi PyInstaller"""
    print("üî® Building protected executable...")
    
    try:
        # Build v·ªõi spec file
        subprocess.run([
            sys.executable, '-m', 'PyInstaller',
            '--clean',
            '--noconfirm',
            'VietnameseOCRTool_Protected.spec'
        ], check=True)
        
        print("‚úÖ Executable built successfully")
        return True
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Build failed: {e}")
        return False

def create_installer():
    """T·∫°o installer cho ·ª©ng d·ª•ng"""
    print("üì¶ Creating installer...")
    
    try:
        # T·∫°o th∆∞ m·ª•c dist n·∫øu ch∆∞a c√≥
        dist_dir = Path('dist')
        if not dist_dir.exists():
            dist_dir.mkdir()
        
        # T·∫°o zip file
        zip_path = 'VietnameseOCRTool_Protected.zip'
        
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            # Th√™m executable
            exe_path = dist_dir / 'VietnameseOCRTool_Protected.exe'
            if exe_path.exists():
                zipf.write(exe_path, 'VietnameseOCRTool_Protected.exe')
            
            # Th√™m th∆∞ m·ª•c Tesseract-OCR
            tesseract_dir = dist_dir / 'Tesseract-OCR'
            if tesseract_dir.exists():
                for root, dirs, files in os.walk(tesseract_dir):
                    for file in files:
                        file_path = Path(root) / file
                        arc_path = file_path.relative_to(dist_dir)
                        zipf.write(file_path, arc_path)
            
            # Th√™m README
            readme_content = """
Vietnamese OCR Tool - Protected Version
=======================================

H∆Ø·ªöNG D·∫™N C√ÄI ƒê·∫∂T:
1. Gi·∫£i n√©n file n√†y v√†o th∆∞ m·ª•c b·∫•t k·ª≥
2. Ch·∫°y VietnameseOCRTool_Protected.exe
3. Nh·∫≠p license key khi ƒë∆∞·ª£c y√™u c·∫ßu
4. ·ª®ng d·ª•ng s·∫Ω t·ª± ƒë·ªông k√≠ch ho·∫°t h·ªá th·ªëng b·∫£o v·ªá

T√çNH NƒÇNG B·∫¢O V·ªÜ:
- M√£ h√≥a code v√† obfuscation
- R√†ng bu·ªôc v·ªõi ph·∫ßn c·ª©ng m√°y t√≠nh
- X√°c th·ª±c online ƒë·ªãnh k·ª≥
- Ch·ªëng debug v√† reverse engineering
- Ch·ªëng sao ch√©p th∆∞ m·ª•c ·ª©ng d·ª•ng

L∆ØU √ù:
- ·ª®ng d·ª•ng c·∫ßn k·∫øt n·ªëi internet ƒë·ªÉ x√°c th·ª±c
- Kh√¥ng th·ªÉ ch·∫°y tr√™n m√°y kh√°c m√† kh√¥ng c√≥ license
- Kh√¥ng th·ªÉ sao ch√©p th∆∞ m·ª•c ƒë·ªÉ s·ª≠ d·ª•ng

H·ªñ TR·ª¢:
- Email: support@vietnamese-ocr.com
- Website: https://vietnamese-ocr.com
"""
            
            zipf.writestr('README.txt', readme_content)
        
        print(f"‚úÖ Installer created: {zip_path}")
        return True
        
    except Exception as e:
        print(f"‚ùå Installer creation failed: {e}")
        return False

def cleanup():
    """D·ªçn d·∫πp c√°c file t·∫°m"""
    print("üßπ Cleaning up...")
    
    temp_files = [
        'obfuscated_ocr_tool_licensed.py',
        'obfuscated_license_client.py',
        'obfuscated_protection_system.py',
        'VietnameseOCRTool_Protected.spec'
    ]
    
    for file in temp_files:
        if os.path.exists(file):
            os.remove(file)
            print(f"üóëÔ∏è Removed {file}")
    
    # X√≥a th∆∞ m·ª•c build
    if os.path.exists('build'):
        shutil.rmtree('build')
        print("üóëÔ∏è Removed build directory")

def main():
    """H√†m main ƒë·ªÉ build ·ª©ng d·ª•ng ƒë∆∞·ª£c b·∫£o v·ªá"""
    print("üõ°Ô∏è Building Protected Vietnamese OCR Tool")
    print("=" * 50)
    
    # B∆∞·ªõc 1: C√†i ƒë·∫∑t dependencies
    if not install_dependencies():
        print("‚ùå Failed to install dependencies")
        return False
    
    # B∆∞·ªõc 2: Obfuscate code
    if not obfuscate_code():
        print("‚ùå Failed to obfuscate code")
        return False
    
    # B∆∞·ªõc 3: T·∫°o spec file
    if not create_protected_spec():
        print("‚ùå Failed to create spec file")
        return False
    
    # B∆∞·ªõc 4: Build executable
    if not build_executable():
        print("‚ùå Failed to build executable")
        return False
    
    # B∆∞·ªõc 5: T·∫°o installer
    if not create_installer():
        print("‚ùå Failed to create installer")
        return False
    
    # B∆∞·ªõc 6: Cleanup
    cleanup()
    
    print("\n" + "=" * 50)
    print("‚úÖ Protected application built successfully!")
    print("üì¶ Installer: VietnameseOCRTool_Protected.zip")
    print("üõ°Ô∏è Protection features enabled:")
    print("   - Code obfuscation")
    print("   - Hardware binding")
    print("   - Online verification")
    print("   - Anti-debugging")
    print("   - Anti-copy protection")
    
    return True

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
