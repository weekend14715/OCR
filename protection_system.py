"""
Advanced Protection System for Vietnamese OCR Tool
H·ªá th·ªëng b·∫£o v·ªá n√¢ng cao ch·ªëng sao ch√©p v√† reverse engineering
"""

import hashlib
import hmac
import time
import os
import sys
import platform
import uuid
import psutil
import requests
import json
import base64
import zlib
from cryptography.fernet import Fernet
from cryptography.hazmat.primitives import hashes
from cryptography.hazmat.primitives.kdf.pbkdf2 import PBKDF2HMAC
import threading
import ctypes
from ctypes import wintypes
import subprocess

class AdvancedProtection:
    """H·ªá th·ªëng b·∫£o v·ªá n√¢ng cao"""
    
    def __init__(self):
        self.server_url = "http://127.0.0.1:5000"
        self.app_name = "VietnameseOCRTool"
        self.protection_key = self._generate_protection_key()
        self.session_token = None
        self.last_verification = 0
        self.verification_interval = 300  # 5 ph√∫t
        self.is_protected = False
        
    def _generate_protection_key(self):
        """T·∫°o key b·∫£o v·ªá d·ª±a tr√™n hardware fingerprint"""
        try:
            # L·∫•y th√¥ng tin ph·∫ßn c·ª©ng
            cpu_info = platform.processor()
            memory_info = str(psutil.virtual_memory().total)
            disk_info = str(psutil.disk_usage('/').total) if os.name != 'nt' else str(psutil.disk_usage('C:\\').total)
            
            # T·∫°o fingerprint
            fingerprint = f"{cpu_info}-{memory_info}-{disk_info}-{platform.machine()}"
            key = hashlib.sha256(fingerprint.encode()).digest()
            
            # T·∫°o Fernet key
            kdf = PBKDF2HMAC(
                algorithm=hashes.SHA256(),
                length=32,
                salt=b'vietnamese_ocr_protection',
                iterations=100000,
            )
            return base64.urlsafe_b64encode(kdf.derive(key))
            
        except Exception as e:
            # Fallback key n·∫øu kh√¥ng l·∫•y ƒë∆∞·ª£c hardware info
            return base64.urlsafe_b64encode(b'fallback_protection_key_123456789012345678901234567890')
    
    def _encrypt_data(self, data):
        """M√£ h√≥a d·ªØ li·ªáu"""
        try:
            f = Fernet(self.protection_key)
            encrypted_data = f.encrypt(data.encode())
            return base64.urlsafe_b64encode(encrypted_data).decode()
        except Exception:
            return base64.urlsafe_b64encode(data.encode()).decode()
    
    def _decrypt_data(self, encrypted_data):
        """Gi·∫£i m√£ d·ªØ li·ªáu"""
        try:
            f = Fernet(self.protection_key)
            decoded_data = base64.urlsafe_b64decode(encrypted_data.encode())
            decrypted_data = f.decrypt(decoded_data)
            return decrypted_data.decode()
        except Exception:
            return base64.urlsafe_b64decode(encrypted_data.encode()).decode()
    
    def _get_hardware_fingerprint(self):
        """L·∫•y hardware fingerprint duy nh·∫•t"""
        try:
            # CPU info
            cpu_count = psutil.cpu_count()
            cpu_freq = psutil.cpu_freq()
            cpu_freq_str = str(cpu_freq.max) if cpu_freq else "unknown"
            
            # Memory info
            memory = psutil.virtual_memory()
            memory_total = str(memory.total)
            
            # Disk info
            disk = psutil.disk_usage('/') if os.name != 'nt' else psutil.disk_usage('C:\\')
            disk_total = str(disk.total)
            
            # Network interfaces
            network_interfaces = []
            for interface, addrs in psutil.net_if_addrs().items():
                for addr in addrs:
                    if addr.family == psutil.AF_LINK:  # MAC address
                        network_interfaces.append(addr.address)
            
            # Boot time
            boot_time = str(psutil.boot_time())
            
            # T·∫°o fingerprint
            fingerprint_data = f"{cpu_count}-{cpu_freq_str}-{memory_total}-{disk_total}-{'-'.join(network_interfaces[:3])}-{boot_time}"
            
            return hashlib.sha256(fingerprint_data.encode()).hexdigest()
            
        except Exception as e:
            # Fallback fingerprint
            return hashlib.sha256(f"{platform.node()}-{uuid.getnode()}-{platform.processor()}".encode()).hexdigest()
    
    def _check_anti_debug(self):
        """Ki·ªÉm tra anti-debugging"""
        try:
            # Ki·ªÉm tra debugger
            if hasattr(sys, 'gettrace') and sys.gettrace() is not None:
                return False
            
            # Ki·ªÉm tra process debugger tr√™n Windows
            if os.name == 'nt':
                kernel32 = ctypes.windll.kernel32
                is_debugger_present = kernel32.IsDebuggerPresent()
                if is_debugger_present:
                    return False
            
            # Ki·ªÉm tra process list cho debugger tools
            debugger_processes = [
                'ollydbg.exe', 'x64dbg.exe', 'windbg.exe', 'ida.exe', 'ida64.exe',
                'ghidra.exe', 'radare2.exe', 'gdb.exe', 'lldb.exe'
            ]
            
            for proc in psutil.process_iter(['name']):
                try:
                    if proc.info['name'].lower() in debugger_processes:
                        return False
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
            
            return True
            
        except Exception:
            return True  # N·∫øu kh√¥ng ki·ªÉm tra ƒë∆∞·ª£c, cho ph√©p ch·∫°y
    
    def _check_integrity(self):
        """Ki·ªÉm tra t√≠nh to√†n v·∫πn c·ªßa ·ª©ng d·ª•ng"""
        try:
            # L·∫•y ƒë∆∞·ªùng d·∫´n file hi·ªán t·∫°i
            if getattr(sys, 'frozen', False):
                app_path = sys.executable
            else:
                app_path = __file__
            
            # Ki·ªÉm tra file size (c√≥ th·ªÉ b·ªã thay ƒë·ªïi)
            file_size = os.path.getsize(app_path)
            
            # Ki·ªÉm tra th·ªùi gian t·∫°o file
            file_time = os.path.getctime(app_path)
            current_time = time.time()
            
            # N·∫øu file ƒë∆∞·ª£c t·∫°o qu√° g·∫ßn th·ªùi ƒëi·ªÉm hi·ªán t·∫°i (c√≥ th·ªÉ b·ªã copy)
            if current_time - file_time < 60:  # 1 ph√∫t
                return False
            
            # Ki·ªÉm tra xem c√≥ file license.dat trong th∆∞ m·ª•c kh√¥ng
            license_file = os.path.join(os.path.dirname(app_path), 'license.dat')
            if os.path.exists(license_file):
                # Ki·ªÉm tra th·ªùi gian t·∫°o license file
                license_time = os.path.getctime(license_file)
                if current_time - license_time < 60:
                    return False
            
            return True
            
        except Exception:
            return True
    
    def _verify_online(self):
        """X√°c th·ª±c online v·ªõi server"""
        try:
            hardware_id = self._get_hardware_fingerprint()
            current_time = int(time.time())
            
            # T·∫°o signature
            message = f"{hardware_id}-{current_time}"
            signature = hmac.new(
                self.protection_key,
                message.encode(),
                hashlib.sha256
            ).hexdigest()
            
            # G·ª≠i request ƒë·∫øn server
            response = requests.post(
                f"{self.server_url}/api/protection/verify",
                json={
                    'hardware_id': hardware_id,
                    'timestamp': current_time,
                    'signature': signature,
                    'app_name': self.app_name
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('valid'):
                    self.session_token = data.get('session_token')
                    self.last_verification = current_time
                    return True
            
            return False
            
        except Exception:
            return False
    
    def _start_protection_thread(self):
        """Kh·ªüi ƒë·ªông thread b·∫£o v·ªá li√™n t·ª•c"""
        def protection_loop():
            while self.is_protected:
                try:
                    # Ki·ªÉm tra anti-debug
                    if not self._check_anti_debug():
                        self._terminate_app("Debugger detected")
                        break
                    
                    # Ki·ªÉm tra integrity
                    if not self._check_integrity():
                        self._terminate_app("Application integrity compromised")
                        break
                    
                    # X√°c th·ª±c online ƒë·ªãnh k·ª≥
                    current_time = time.time()
                    if current_time - self.last_verification > self.verification_interval:
                        if not self._verify_online():
                            self._terminate_app("Online verification failed")
                            break
                    
                    time.sleep(30)  # Ki·ªÉm tra m·ªói 30 gi√¢y
                    
                except Exception as e:
                    print(f"Protection error: {e}")
                    time.sleep(60)
        
        thread = threading.Thread(target=protection_loop, daemon=True)
        thread.start()
    
    def _terminate_app(self, reason):
        """K·∫øt th√∫c ·ª©ng d·ª•ng khi ph√°t hi·ªán vi ph·∫°m"""
        print(f"üö´ Protection violation: {reason}")
        print("·ª®ng d·ª•ng s·∫Ω ƒë∆∞·ª£c ƒë√≥ng ƒë·ªÉ b·∫£o v·ªá b·∫£n quy·ªÅn.")
        
        # X√≥a session token
        self.session_token = None
        self.is_protected = False
        
        # Tho√°t ·ª©ng d·ª•ng
        os._exit(1)
    
    def initialize_protection(self):
        """Kh·ªüi t·∫°o h·ªá th·ªëng b·∫£o v·ªá"""
        try:
            # Ki·ªÉm tra anti-debug
            if not self._check_anti_debug():
                self._terminate_app("Debugger detected")
                return False
            
            # Ki·ªÉm tra integrity
            if not self._check_integrity():
                self._terminate_app("Application integrity compromised")
                return False
            
            # X√°c th·ª±c online
            if not self._verify_online():
                self._terminate_app("Online verification failed")
                return False
            
            # Kh·ªüi ƒë·ªông protection thread
            self.is_protected = True
            self._start_protection_thread()
            
            print("‚úÖ Advanced protection system activated")
            return True
            
        except Exception as e:
            print(f"‚ùå Protection initialization failed: {e}")
            return False
    
    def check_license_with_protection(self, license_key):
        """Ki·ªÉm tra license v·ªõi b·∫£o v·ªá n√¢ng cao"""
        try:
            # Ki·ªÉm tra anti-debug tr∆∞·ªõc
            if not self._check_anti_debug():
                return {'valid': False, 'error': 'Debugger detected'}
            
            # Ki·ªÉm tra integrity
            if not self._check_integrity():
                return {'valid': False, 'error': 'Application integrity compromised'}
            
            # X√°c th·ª±c online
            if not self._verify_online():
                return {'valid': False, 'error': 'Online verification failed'}
            
            # Ki·ªÉm tra license v·ªõi server
            hardware_id = self._get_hardware_fingerprint()
            
            response = requests.post(
                f"{self.server_url}/api/validate",
                json={
                    'license_key': license_key.strip().upper(),
                    'machine_id': hardware_id,
                    'protection_token': self.session_token
                },
                timeout=10
            )
            
            if response.status_code == 200:
                data = response.json()
                if data.get('valid'):
                    # Kh·ªüi t·∫°o protection system
                    self.initialize_protection()
                
                return data
            else:
                return {
                    'valid': False,
                    'error': f'Server error: {response.status_code}'
                }
                
        except Exception as e:
            return {
                'valid': False,
                'error': f'Protection error: {str(e)}'
            }
    
    def shutdown_protection(self):
        """T·∫Øt h·ªá th·ªëng b·∫£o v·ªá"""
        self.is_protected = False
        self.session_token = None
        print("üõ°Ô∏è Protection system shutdown")

# Global protection instance
protection_system = AdvancedProtection()
