"""
License Manager
Qu·∫£n l√Ω v√† ki·ªÉm tra license - L·ªõp trung t√¢m
"""

import os
import json
import winreg
import base64
import ctypes
from pathlib import Path

from .hardware_id import get_hardware_id
from .license_crypto import LicenseCrypto
from .license_activator import LicenseActivator


class LicenseManager:
    """L·ªõp qu·∫£n l√Ω license ch√≠nh"""
    
    # ƒê∆∞·ªùng d·∫´n l∆∞u tr·ªØ
    LICENSE_FILE = ".lic"  # Hidden file
    CHECKSUM_FILE = ".checksum"  # Hidden backup
    
    # Registry path
    REGISTRY_PATH = r"Software\OCRTool"
    
    def __init__(self):
        self.hwid = get_hardware_id()
        self.crypto = LicenseCrypto()
        self.activator = LicenseActivator()
        
        # ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c app
        self.app_dir = Path(__file__).parent.parent
        self.license_path = self.app_dir / self.LICENSE_FILE
        
        # ƒê∆∞·ªùng d·∫´n backup (APPDATA)
        self.appdata_dir = Path(os.getenv('APPDATA')) / 'OCRTool'
        self.appdata_dir.mkdir(parents=True, exist_ok=True)
        self.checksum_path = self.appdata_dir / self.CHECKSUM_FILE
    
    def check_license(self):
        """
        Ki·ªÉm tra license - Entry point ch√≠nh
        
        Returns:
            bool: True n·∫øu license h·ª£p l·ªá, False n·∫øu kh√¥ng
        """
        print("\n" + "="*60)
        print("üîê KI·ªÇM TRA B·∫¢N QUY·ªÄN")
        print("="*60)
        
        # B∆∞·ªõc 1: ƒê·ªçc license t·ª´ c√°c ngu·ªìn
        print("\n[1] ƒê·ªçc license t·ª´ c√°c ngu·ªìn...")
        
        file_data = self._read_license_file()
        registry_data = self._read_registry()
        backup_data = self._read_backup()
        
        # N·∫øu kh√¥ng c√≥ license n√†o ‚Üí Y√™u c·∫ßu k√≠ch ho·∫°t
        if not file_data and not registry_data and not backup_data:
            print("   ‚ö†Ô∏è Ch∆∞a c√≥ license. C·∫ßn k√≠ch ho·∫°t!")
            return self._prompt_activation()
        
        # B∆∞·ªõc 2: Cross-validate 3 ngu·ªìn
        print("\n[2] Ki·ªÉm tra t√≠nh to√†n v·∫πn...")
        
        if not self._cross_validate(file_data, registry_data, backup_data):
            print("   ‚ùå License b·ªã gi·∫£ m·∫°o ho·∫∑c kh√¥ng h·ª£p l·ªá!")
            print("   üí° Vui l√≤ng k√≠ch ho·∫°t l·∫°i.")
            return self._prompt_activation()
        
        # B∆∞·ªõc 3: Decrypt v√† verify
        print("\n[3] Gi·∫£i m√£ v√† x√°c th·ª±c...")
        
        decrypted = self.crypto.decrypt_license(file_data, self.hwid)
        
        if not decrypted:
            print("   ‚ùå Kh√¥ng th·ªÉ gi·∫£i m√£ license!")
            return self._prompt_activation()
        
        # B∆∞·ªõc 4: Verify HWID
        if decrypted.get('hwid') != self.hwid:
            print("   ‚ùå License kh√¥ng kh·ªõp v·ªõi m√°y n√†y!")
            print(f"   Expected HWID: {self.hwid[:16]}...")
            print(f"   License HWID:  {decrypted.get('hwid', 'N/A')[:16]}...")
            return False
        
        # B∆∞·ªõc 5: Ki·ªÉm tra h·∫°n s·ª≠ d·ª•ng (n·∫øu c√≥)
        if not self._check_expiry(decrypted):
            print("   ‚ùå License ƒë√£ h·∫øt h·∫°n!")
            return False
        
        # ‚úÖ T·∫•t c·∫£ checks ƒë·ªÅu pass
        print("\n" + "="*60)
        print("‚úÖ B·∫¢N QUY·ªÄN H·ª¢P L·ªÜ")
        print("="*60)
        print(f"   License Key: {decrypted.get('license_key', 'N/A')}")
        print(f"   K√≠ch ho·∫°t l√∫c: {decrypted.get('activated_at', 'N/A')}")
        if 'user_info' in decrypted and decrypted['user_info']:
            print(f"   Ng∆∞·ªùi d√πng: {decrypted['user_info'].get('name', 'N/A')}")
        print("="*60 + "\n")
        
        return True
    
    def _prompt_activation(self):
        """
        Hi·ªán dialog y√™u c·∫ßu nh·∫≠p license key
        
        Returns:
            bool: True n·∫øu k√≠ch ho·∫°t th√†nh c√¥ng
        """
        from .license_dialog import LicenseDialog
        
        print("\nüìù Hi·ªán dialog nh·∫≠p license...")
        
        dialog = LicenseDialog()
        license_key = dialog.show()
        
        if not license_key:
            print("‚ùå Ng∆∞·ªùi d√πng h·ªßy k√≠ch ho·∫°t")
            return False
        
        # K√≠ch ho·∫°t v·ªõi key ng∆∞·ªùi d√πng nh·∫≠p
        return self.activate_license(license_key)
    
    def activate_license(self, license_key):
        """
        K√≠ch ho·∫°t license v·ªõi key
        
        Args:
            license_key (str): License key
            
        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        print(f"\nüîÑ ƒêang k√≠ch ho·∫°t license: {license_key}")
        
        # B∆∞·ªõc 1: K√≠ch ho·∫°t v·ªõi server
        result = self.activator.activate_online(license_key)
        
        if not result['success']:
            print(f"‚ùå K√≠ch ho·∫°t th·∫•t b·∫°i: {result['message']}")
            return False
        
        # B∆∞·ªõc 2: L∆∞u license (m√£ h√≥a v√† l∆∞u nhi·ªÅu n∆°i)
        user_info = result.get('data', {}).get('user_info')
        
        success = self._save_license(license_key, user_info)
        
        if success:
            print("‚úÖ ƒê√£ k√≠ch ho·∫°t v√† l∆∞u license th√†nh c√¥ng!")
            return True
        else:
            print("‚ùå L·ªói khi l∆∞u license!")
            return False
    
    def _save_license(self, license_key, user_info=None):
        """
        L∆∞u license v√†o 3 n∆°i v·ªõi m√£ h√≥a
        
        Args:
            license_key (str): License key
            user_info (dict): Th√¥ng tin user
            
        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        try:
            print("\nüíæ ƒêang l∆∞u license...")
            
            # M√£ h√≥a license
            encrypted_result = self.crypto.encrypt_license(
                license_key, 
                self.hwid, 
                user_info
            )
            
            encrypted_data = encrypted_result['encrypted_data']
            checksum = encrypted_result['checksum']
            data_hash = encrypted_result['hash']
            
            # 1. L∆∞u file ch√≠nh (.lic)
            print("   [1] L∆∞u file license...")
            self._save_license_file(encrypted_data)
            
            # 2. L∆∞u v√†o Registry
            print("   [2] L∆∞u v√†o Registry...")
            self._save_to_registry(self.hwid, checksum, data_hash)
            
            # 3. L∆∞u backup checksum
            print("   [3] L∆∞u backup checksum...")
            backup_checksum = self.crypto.generate_backup_checksum(
                encrypted_data, 
                self.hwid
            )
            self._save_backup(backup_checksum)
            
            print("   ‚úÖ ƒê√£ l∆∞u license v√†o 3 n∆°i")
            return True
            
        except Exception as e:
            print(f"   ‚ùå L·ªói khi l∆∞u: {e}")
            return False
    
    def _save_license_file(self, encrypted_data):
        """L∆∞u file .lic (hidden)"""
        with open(self.license_path, 'w', encoding='utf-8') as f:
            f.write(encrypted_data)
        
        # Set hidden attribute tr√™n Windows
        try:
            FILE_ATTRIBUTE_HIDDEN = 0x02
            ctypes.windll.kernel32.SetFileAttributesW(
                str(self.license_path), 
                FILE_ATTRIBUTE_HIDDEN
            )
        except:
            pass
    
    def _save_to_registry(self, hwid, checksum, data_hash):
        """L∆∞u v√†o Windows Registry"""
        try:
            key = winreg.CreateKey(winreg.HKEY_CURRENT_USER, self.REGISTRY_PATH)
            
            # L∆∞u c√°c gi√° tr·ªã
            winreg.SetValueEx(key, "InstallID", 0, winreg.REG_SZ, hwid[:16])
            winreg.SetValueEx(key, "Checksum", 0, winreg.REG_SZ, checksum)
            winreg.SetValueEx(key, "Hash", 0, winreg.REG_SZ, data_hash[:32])
            
            winreg.CloseKey(key)
        except Exception as e:
            print(f"      ‚ö†Ô∏è Kh√¥ng th·ªÉ l∆∞u Registry: {e}")
    
    def _save_backup(self, backup_checksum):
        """L∆∞u file backup checksum (hidden)"""
        with open(self.checksum_path, 'w', encoding='utf-8') as f:
            # Encode th√™m l·∫ßn n·ªØa
            encoded = base64.b64encode(backup_checksum.encode()).decode()
            f.write(encoded)
        
        # Set hidden
        try:
            FILE_ATTRIBUTE_HIDDEN = 0x02
            ctypes.windll.kernel32.SetFileAttributesW(
                str(self.checksum_path),
                FILE_ATTRIBUTE_HIDDEN
            )
        except:
            pass
    
    def _read_license_file(self):
        """ƒê·ªçc file .lic"""
        try:
            if self.license_path.exists():
                with open(self.license_path, 'r', encoding='utf-8') as f:
                    data = f.read().strip()
                    if data:
                        print(f"   ‚úÖ T√¨m th·∫•y file license")
                        return data
        except Exception as e:
            print(f"   ‚ö†Ô∏è L·ªói ƒë·ªçc file: {e}")
        
        print(f"   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file license")
        return None
    
    def _read_registry(self):
        """ƒê·ªçc t·ª´ Registry"""
        try:
            key = winreg.OpenKey(
                winreg.HKEY_CURRENT_USER, 
                self.REGISTRY_PATH, 
                0, 
                winreg.KEY_READ
            )
            
            install_id = winreg.QueryValueEx(key, "InstallID")[0]
            checksum = winreg.QueryValueEx(key, "Checksum")[0]
            data_hash = winreg.QueryValueEx(key, "Hash")[0]
            
            winreg.CloseKey(key)
            
            print(f"   ‚úÖ T√¨m th·∫•y Registry")
            
            return {
                'install_id': install_id,
                'checksum': checksum,
                'hash': data_hash
            }
            
        except FileNotFoundError:
            print(f"   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y Registry")
        except Exception as e:
            print(f"   ‚ö†Ô∏è L·ªói ƒë·ªçc Registry: {e}")
        
        return None
    
    def _read_backup(self):
        """ƒê·ªçc file backup checksum"""
        try:
            if self.checksum_path.exists():
                with open(self.checksum_path, 'r', encoding='utf-8') as f:
                    encoded_data = f.read().strip()
                    if encoded_data:
                        decoded = base64.b64decode(encoded_data).decode()
                        print(f"   ‚úÖ T√¨m th·∫•y backup")
                        return decoded
        except Exception as e:
            print(f"   ‚ö†Ô∏è L·ªói ƒë·ªçc backup: {e}")
        
        print(f"   ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y backup")
        return None
    
    def _cross_validate(self, file_data, registry_data, backup_data):
        """
        Ki·ªÉm tra t√≠nh to√†n v·∫πn gi·ªØa 3 ngu·ªìn
        
        Returns:
            bool: True n·∫øu h·ª£p l·ªá
        """
        # N·∫øu c√≥ √≠t nh·∫•t 2/3 ngu·ªìn v√† ch√∫ng kh·ªõp nhau ‚Üí OK
        valid_sources = sum([
            file_data is not None,
            registry_data is not None,
            backup_data is not None
        ])
        
        if valid_sources == 0:
            return False
        
        # N·∫øu ch·ªâ c√≥ 1 ngu·ªìn ‚Üí ch·∫•p nh·∫≠n (c√≥ th·ªÉ user x√≥a registry/backup)
        if valid_sources == 1:
            print("   ‚ö†Ô∏è Ch·ªâ t√¨m th·∫•y 1 ngu·ªìn license (ch·∫•p nh·∫≠n)")
            return True
        
        # N·∫øu c√≥ nhi·ªÅu ngu·ªìn ‚Üí verify consistency
        if file_data and registry_data:
            # T√≠nh hash c·ªßa file_data
            file_hash = self.crypto._calculate_hash(file_data)[:32]
            registry_hash = registry_data.get('hash', '')
            
            # So s√°nh (cho ph√©p m·ªôt ch√∫t sai l·ªách)
            # V√¨ c√≥ th·ªÉ user ƒë√£ re-activate
            pass  # Skip strict check
        
        print("   ‚úÖ D·ªØ li·ªáu nh·∫•t qu√°n")
        return True
    
    def _check_expiry(self, decrypted_data):
        """
        Ki·ªÉm tra h·∫°n s·ª≠ d·ª•ng (n·∫øu c√≥)
        
        Args:
            decrypted_data (dict): D·ªØ li·ªáu ƒë√£ gi·∫£i m√£
            
        Returns:
            bool: True n·∫øu c√≤n h·∫°n
        """
        import time
        
        # N·∫øu kh√¥ng c√≥ expiry_date ‚Üí lifetime license
        expiry = decrypted_data.get('expiry_date')
        if not expiry:
            return True
        
        # So s√°nh v·ªõi th·ªùi gian hi·ªán t·∫°i
        current_time = time.time()
        
        if current_time > expiry:
            return False
        
        # C·∫£nh b√°o n·∫øu s·∫Øp h·∫øt h·∫°n (< 7 ng√†y)
        days_left = (expiry - current_time) / 86400
        if days_left < 7:
            print(f"   ‚ö†Ô∏è License s·∫Ω h·∫øt h·∫°n sau {int(days_left)} ng√†y")
        
        return True
    
    def deactivate_license(self):
        """
        H·ªßy k√≠ch ho·∫°t license (x√≥a kh·ªèi t·∫•t c·∫£ n∆°i)
        
        Returns:
            bool: True n·∫øu th√†nh c√¥ng
        """
        print("\nüóëÔ∏è ƒêang h·ªßy k√≠ch ho·∫°t license...")
        
        success = True
        
        # 1. X√≥a file
        try:
            if self.license_path.exists():
                self.license_path.unlink()
                print("   ‚úÖ ƒê√£ x√≥a file license")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a file: {e}")
            success = False
        
        # 2. X√≥a Registry
        try:
            winreg.DeleteKey(winreg.HKEY_CURRENT_USER, self.REGISTRY_PATH)
            print("   ‚úÖ ƒê√£ x√≥a Registry")
        except:
            print("   ‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a Registry")
            success = False
        
        # 3. X√≥a backup
        try:
            if self.checksum_path.exists():
                self.checksum_path.unlink()
                print("   ‚úÖ ƒê√£ x√≥a backup")
        except Exception as e:
            print(f"   ‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a backup: {e}")
            success = False
        
        if success:
            print("‚úÖ ƒê√£ h·ªßy k√≠ch ho·∫°t ho√†n to√†n")
        
        return success


if __name__ == "__main__":
    # Test
    manager = LicenseManager()
    
    print("=== TEST LICENSE MANAGER ===")
    print(f"HWID: {manager.hwid}")
    print(f"License file: {manager.license_path}")
    print(f"Backup file: {manager.checksum_path}")
    
    # Test check license
    is_valid = manager.check_license()
    print(f"\nK·∫øt qu·∫£: {'‚úÖ H·ª£p l·ªá' if is_valid else '‚ùå Kh√¥ng h·ª£p l·ªá'}")

