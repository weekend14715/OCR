"""
License Activator
X·ª≠ l√Ω k√≠ch ho·∫°t license v·ªõi server
"""

import requests
import json
import time
from .hardware_id import get_hardware_id


class LicenseActivator:
    """L·ªõp x·ª≠ l√Ω k√≠ch ho·∫°t license v·ªõi server"""
    
    # URL API server (Render deployment)
    API_BASE_URL = "https://ocr-uufr.onrender.com/api"
    
    # Timeout cho requests (gi√¢y)
    TIMEOUT = 10
    
    def __init__(self):
        self.hwid = get_hardware_id()
    
    def activate_online(self, license_key):
        """
        K√≠ch ho·∫°t license tr·ª±c tuy·∫øn v·ªõi server
        
        Args:
            license_key (str): License key ng∆∞·ªùi d√πng nh·∫≠p
            
        Returns:
            dict: {
                'success': bool,
                'message': str,
                'data': dict ho·∫∑c None,
                'error': str ho·∫∑c None
            }
        """
        try:
            # Chu·∫©n b·ªã request data
            request_data = {
                'license_key': license_key,
                'hwid': self.hwid,
                'timestamp': time.time(),
                'product': 'OCR_TOOL',
                'version': '1.0'
            }
            
            print(f"üîÑ ƒêang k·∫øt n·ªëi server ƒë·ªÉ k√≠ch ho·∫°t...")
            print(f"   License Key: {license_key}")
            print(f"   HWID: {self.hwid[:16]}...")
            
            # G·ª≠i request ƒë·∫øn server
            response = requests.post(
                f"{self.API_BASE_URL}/validate",
                json={
                    'license_key': license_key,
                    'machine_id': self.hwid
                },
                timeout=self.TIMEOUT,
                headers={
                    'Content-Type': 'application/json',
                    'User-Agent': 'OCRTool/1.0'
                }
            )
            
            # Parse response
            if response.status_code == 200:
                result = response.json()
                
                if result.get('valid'):
                    print(f"‚úÖ K√≠ch ho·∫°t th√†nh c√¥ng!")
                    return {
                        'success': True,
                        'message': result.get('message', 'License activated successfully'),
                        'data': {
                            'plan': result.get('plan'),
                            'activated': result.get('activated'),
                            'expires': result.get('expires')
                        },
                        'error': None
                    }
                else:
                    error_msg = result.get('error', 'Unknown error')
                    print(f"‚ùå K√≠ch ho·∫°t th·∫•t b·∫°i: {error_msg}")
                    return {
                        'success': False,
                        'message': error_msg,
                        'data': None,
                        'error': error_msg
                    }
            
            else:
                return {
                    'success': False,
                    'message': f'L·ªói server (HTTP {response.status_code})',
                    'data': None,
                    'error': f'HTTP {response.status_code}'
                }
        
        except requests.exceptions.Timeout:
            return {
                'success': False,
                'message': 'Timeout: Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server',
                'data': None,
                'error': 'Connection timeout'
            }
        
        except requests.exceptions.ConnectionError:
            print("‚ö†Ô∏è Kh√¥ng th·ªÉ k·∫øt n·ªëi server, th·ª≠ k√≠ch ho·∫°t offline...")
            return self._activate_offline(license_key)
        
        except Exception as e:
            return {
                'success': False,
                'message': f'L·ªói kh√¥ng x√°c ƒë·ªãnh: {str(e)}',
                'data': None,
                'error': str(e)
            }
    
    def _activate_offline(self, license_key):
        """
        K√≠ch ho·∫°t offline (fallback khi kh√¥ng c√≥ m·∫°ng)
        S·ª≠ d·ª•ng thu·∫≠t to√°n validate key c·ª•c b·ªô
        
        Args:
            license_key (str): License key
            
        Returns:
            dict: K·∫øt qu·∫£ k√≠ch ho·∫°t
        """
        print("üîí Ch·∫ø ƒë·ªô k√≠ch ho·∫°t OFFLINE")
        
        # Validate format key
        if not self._validate_key_format(license_key):
            return {
                'success': False,
                'message': 'License key kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng',
                'data': None,
                'error': 'Invalid key format'
            }
        
        # Validate checksum
        if not self._validate_key_checksum(license_key):
            return {
                'success': False,
                'message': 'License key kh√¥ng h·ª£p l·ªá (checksum sai)',
                'data': None,
                'error': 'Invalid checksum'
            }
        
        # N·∫øu pass t·∫•t c·∫£ checks ‚Üí cho ph√©p k√≠ch ho·∫°t
        print("‚úÖ K√≠ch ho·∫°t offline th√†nh c√¥ng!")
        
        return {
            'success': True,
            'message': 'ƒê√£ k√≠ch ho·∫°t offline th√†nh c√¥ng',
            'data': {
                'license_key': license_key,
                'activation_type': 'offline',
                'user_info': None
            },
            'error': None
        }
    
    def _validate_key_format(self, key):
        """
        Ki·ªÉm tra ƒë·ªãnh d·∫°ng key: XXXX-XXXX-XXXX-XXXX (4 groups, m·ªói group 4 k√Ω t·ª± hex)
        ƒê·ªìng b·ªô v·ªõi server generate_license_key() trong app.py
        
        Args:
            key (str): License key
            
        Returns:
            bool: True n·∫øu ƒë√∫ng format
        """
        import re
        # Format: 4 nh√≥m, m·ªói nh√≥m 4 k√Ω t·ª± hex [0-9A-F]
        pattern = r'^[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}-[0-9A-F]{4}$'
        return bool(re.match(pattern, key.upper()))
    
    def _validate_key_checksum(self, key):
        """
        Validate key b·∫±ng c√°ch ki·ªÉm tra v·ªõi database server
        Kh√¥ng c√≤n d√πng checksum offline v√¨ server qu·∫£n l√Ω to√†n b·ªô
        
        Args:
            key (str): License key
            
        Returns:
            bool: True n·∫øu key t·ªìn t·∫°i trong database (basic check)
        """
        # Format XXXX-XXXX-XXXX-XXXX ƒë√£ ƒë·ªß, kh√¥ng c·∫ßn checksum offline
        # Server s·∫Ω validate key c√≥ trong database hay kh√¥ng
        return True
    
    def verify_with_server(self, license_key):
        """
        Verify license v·ªõi server (kh√¥ng k√≠ch ho·∫°t, ch·ªâ ki·ªÉm tra)
        
        Args:
            license_key (str): License key
            
        Returns:
            dict: Th√¥ng tin license t·ª´ server
        """
        try:
            response = requests.post(
                f"{self.API_BASE_URL}/validate",
                json={
                    'license_key': license_key,
                    'machine_id': self.hwid
                },
                timeout=self.TIMEOUT
            )
            
            if response.status_code == 200:
                result = response.json()
                return {
                    'success': result.get('valid', False),
                    'error': result.get('error', None),
                    'data': result
                }
            else:
                return {'success': False, 'error': 'Verification failed'}
                
        except:
            return {'success': False, 'error': 'Cannot connect to server'}
    
    def deactivate(self, license_key):
        """
        H·ªßy k√≠ch ho·∫°t license (gi·∫£i ph√≥ng m√°y)
        Ch·ª©c nƒÉng n√†y c·∫ßn admin API key, user kh√¥ng th·ªÉ t·ª± deactivate
        
        Args:
            license_key (str): License key
            
        Returns:
            dict: K·∫øt qu·∫£ deactivate
        """
        print("‚ö†Ô∏è Deactivate license c·∫ßn li√™n h·ªá admin")
        print("   Email support ƒë·ªÉ y√™u c·∫ßu chuy·ªÉn license sang m√°y kh√°c")
        return {
            'success': False,
            'message': 'Vui l√≤ng li√™n h·ªá support ƒë·ªÉ chuy·ªÉn license',
            'support_email': 'support@ocrtool.com'
        }


if __name__ == "__main__":
    # Test
    activator = LicenseActivator()
    
    print("=== TEST LICENSE ACTIVATOR ===")
    print(f"HWID: {activator.hwid}")
    print(f"API Server: {activator.API_BASE_URL}")
    
    # Test v·ªõi key m·∫´u (format server: XXXX-XXXX-XXXX-XXXX)
    test_key = "1A2B-3C4D-5E6F-7890"
    
    print(f"\nüß™ Test validate format:")
    print(f"   Key: {test_key}")
    print(f"   Valid: {activator._validate_key_format(test_key)}")
    
    print(f"\nüß™ Test activate (s·∫Ω th·ª≠ k·∫øt n·ªëi server):")
    result = activator.activate_online(test_key)
    print(f"   Success: {result['success']}")
    print(f"   Message: {result['message']}")
    
    if not result['success']:
        print(f"\nüí° L∆∞u √Ω: Key m·∫´u '{test_key}' ch·ªâ ƒë·ªÉ test format")
        print(f"   ƒê·ªÉ test th·ª±c t·∫ø, c·∫ßn t·∫°o key t·ª´ admin panel ho·∫∑c mua license")

