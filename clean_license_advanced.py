"""
Clean License - Advanced Version
X√≥a to√†n b·ªô license data t·ª´ 3 v·ªã tr√≠ + hi·ªÉn th·ªã chi ti·∫øt
"""

import os
import sys
import winreg
import shutil
from pathlib import Path


class LicenseCleaner:
    """Clean all license data"""
    
    def __init__(self):
        self.results = {
            'lic_file': False,
            'registry': False,
            'backup': False
        }
    
    def clean_all(self):
        """X√≥a to√†n b·ªô license data"""
        print("=" * 70)
        print("  üßπ CLEAN LICENSE TOOL - X√ìA TO√ÄN B·ªò D·ªÆ LI·ªÜU LICENSE")
        print("=" * 70)
        print()
        
        # Confirm
        confirm = input("‚ö†Ô∏è  B·∫°n c√≥ ch·∫Øc mu·ªën X√ìA to√†n b·ªô license? (Y/N): ")
        if confirm.upper() != 'Y':
            print("\n‚ùå ƒê√£ h·ªßy. Kh√¥ng c√≥ g√¨ b·ªã x√≥a.\n")
            return False
        
        print("\n" + "=" * 70)
        print("  B·∫ÆT ƒê·∫¶U X√ìA D·ªÆ LI·ªÜU...")
        print("=" * 70)
        print()
        
        # Clean t·ª´ng v·ªã tr√≠
        self.clean_lic_file()
        self.clean_registry()
        self.clean_backup()
        
        # Report
        self.show_report()
        
        return all(self.results.values())
    
    def clean_lic_file(self):
        """X√≥a file .lic"""
        print("[1/3] X√≥a file .lic...")
        
        # C√°c v·ªã tr√≠ c√≥ th·ªÉ c√≥ file .lic
        possible_paths = [
            Path('.lic'),
            Path(__file__).parent / '.lic',
            Path.cwd() / '.lic'
        ]
        
        found = False
        deleted = False
        
        for path in possible_paths:
            if path.exists():
                found = True
                try:
                    path.unlink()
                    print(f"   ‚úÖ ƒê√£ x√≥a: {path}")
                    deleted = True
                except Exception as e:
                    print(f"   ‚ùå Kh√¥ng th·ªÉ x√≥a {path}: {e}")
        
        if not found:
            print("   ‚ÑπÔ∏è  File .lic kh√¥ng t·ªìn t·∫°i")
            deleted = True  # Consider as success
        
        self.results['lic_file'] = deleted
        print()
    
    def clean_registry(self):
        """X√≥a registry keys"""
        print("[2/3] X√≥a Registry (HKCU\\Software\\OCRTool)...")
        
        try:
            # M·ªü key ƒë·ªÉ ki·ªÉm tra
            key = winreg.OpenKey(
                winreg.HKEY_CURRENT_USER,
                r"Software\OCRTool",
                0,
                winreg.KEY_READ
            )
            
            # Li·ªát k√™ c√°c values
            values_deleted = []
            try:
                i = 0
                while True:
                    name, value, type_ = winreg.EnumValue(key, i)
                    values_deleted.append(name)
                    i += 1
            except OSError:
                pass
            
            winreg.CloseKey(key)
            
            # X√≥a to√†n b·ªô key
            winreg.DeleteKey(
                winreg.HKEY_CURRENT_USER,
                r"Software\OCRTool"
            )
            
            print("   ‚úÖ ƒê√£ x√≥a registry key:")
            for val in values_deleted:
                print(f"      - {val}")
            
            self.results['registry'] = True
        
        except FileNotFoundError:
            print("   ‚ÑπÔ∏è  Registry key kh√¥ng t·ªìn t·∫°i")
            self.results['registry'] = True  # Consider as success
        
        except Exception as e:
            print(f"   ‚ùå L·ªói x√≥a registry: {e}")
            self.results['registry'] = False
        
        print()
    
    def clean_backup(self):
        """X√≥a backup checksum"""
        print("[3/3] X√≥a backup checksum (%APPDATA%\\OCRTool)...")
        
        appdata = os.environ.get('APPDATA')
        if not appdata:
            print("   ‚ùå Kh√¥ng t√¨m th·∫•y %APPDATA%")
            self.results['backup'] = False
            print()
            return
        
        ocr_tool_dir = Path(appdata) / 'OCRTool'
        checksum_file = ocr_tool_dir / '.checksum'
        
        found = False
        deleted = False
        
        # X√≥a file .checksum
        if checksum_file.exists():
            found = True
            try:
                checksum_file.unlink()
                print(f"   ‚úÖ ƒê√£ x√≥a: {checksum_file}")
                deleted = True
            except Exception as e:
                print(f"   ‚ùå Kh√¥ng th·ªÉ x√≥a {checksum_file}: {e}")
        
        # X√≥a th∆∞ m·ª•c n·∫øu r·ªóng
        if ocr_tool_dir.exists():
            try:
                if not any(ocr_tool_dir.iterdir()):
                    ocr_tool_dir.rmdir()
                    print(f"   ‚úÖ ƒê√£ x√≥a th∆∞ m·ª•c: {ocr_tool_dir}")
            except Exception as e:
                print(f"   ‚ÑπÔ∏è  Kh√¥ng th·ªÉ x√≥a th∆∞ m·ª•c: {e}")
        
        if not found:
            print("   ‚ÑπÔ∏è  File .checksum kh√¥ng t·ªìn t·∫°i")
            deleted = True
        
        self.results['backup'] = deleted
        print()
    
    def show_report(self):
        """Hi·ªÉn th·ªã b√°o c√°o k·∫øt qu·∫£"""
        print("=" * 70)
        print("  KI·ªÇM TRA K·∫æT QU·∫¢")
        print("=" * 70)
        print()
        
        status_icon = lambda x: "‚úÖ" if x else "‚ùå"
        
        print(f"[{status_icon(self.results['lic_file'])}] File .lic")
        print(f"[{status_icon(self.results['registry'])}] Registry keys")
        print(f"[{status_icon(self.results['backup'])}] Backup checksum")
        
        print()
        print("=" * 70)
        
        if all(self.results.values()):
            print("  ‚úÖ HO√ÄN T·∫§T! ƒê√£ x√≥a s·∫°ch to√†n b·ªô license data")
            print()
            print("  B√¢y gi·ªù b·∫°n c√≥ th·ªÉ:")
            print("  1. Test v·ªõi license key m·ªõi")
            print("  2. Activate l·∫°i v·ªõi key c≈©")
            print("  3. Ch·∫°y app s·∫Ω hi·ªán dialog nh·∫≠p license")
        else:
            print("  ‚ö†Ô∏è  M·ªòT S·ªê FILE CH∆ØA X√ìA ƒê∆Ø·ª¢C")
            print()
            print("  Nguy√™n nh√¢n c√≥ th·ªÉ:")
            print("  - File ƒëang ƒë∆∞·ª£c m·ªü b·ªüi ·ª©ng d·ª•ng")
            print("  - Thi·∫øu quy·ªÅn truy c·∫≠p")
            print()
            print("  Gi·∫£i ph√°p:")
            print("  1. ƒê√≥ng t·∫•t c·∫£ ·ª©ng d·ª•ng OCR Tool")
            print("  2. Ch·∫°y l·∫°i script n√†y")
        
        print("=" * 70)
        print()
    
    def verify_clean(self):
        """Verify t·∫•t c·∫£ ƒë√£ b·ªã x√≥a"""
        print("\n" + "=" * 70)
        print("  üîç VERIFY - KI·ªÇM TRA L·∫†I")
        print("=" * 70)
        print()
        
        all_clean = True
        
        # Check .lic
        lic_exists = Path('.lic').exists()
        if lic_exists:
            print("‚ùå File .lic v·∫´n t·ªìn t·∫°i")
            all_clean = False
        else:
            print("‚úÖ File .lic ƒë√£ b·ªã x√≥a")
        
        # Check registry
        try:
            winreg.OpenKey(
                winreg.HKEY_CURRENT_USER,
                r"Software\OCRTool",
                0,
                winreg.KEY_READ
            )
            print("‚ùå Registry key v·∫´n t·ªìn t·∫°i")
            all_clean = False
        except FileNotFoundError:
            print("‚úÖ Registry key ƒë√£ b·ªã x√≥a")
        
        # Check backup
        appdata = os.environ.get('APPDATA')
        checksum_path = Path(appdata) / 'OCRTool' / '.checksum'
        if checksum_path.exists():
            print("‚ùå Backup checksum v·∫´n t·ªìn t·∫°i")
            all_clean = False
        else:
            print("‚úÖ Backup checksum ƒë√£ b·ªã x√≥a")
        
        print()
        if all_clean:
            print("üéâ T·∫§T C·∫¢ ƒê·ªÄU S·∫†CH! License ƒë√£ b·ªã x√≥a ho√†n to√†n.")
        else:
            print("‚ö†Ô∏è  M·ªôt s·ªë file v·∫´n c√≤n. H√£y x√≥a th·ªß c√¥ng ho·∫∑c th·ª≠ l·∫°i.")
        
        print("=" * 70)
        print()


def main():
    """Main function"""
    cleaner = LicenseCleaner()
    
    try:
        success = cleaner.clean_all()
        
        # Verify
        if success:
            cleaner.verify_clean()
        
        return 0 if success else 1
    
    except KeyboardInterrupt:
        print("\n\n‚ùå ƒê√£ h·ªßy b·ªüi user.\n")
        return 1
    
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng x√°c ƒë·ªãnh: {e}\n")
        return 1


if __name__ == "__main__":
    sys.exit(main())

