╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║   🎨 VISUAL DIAGRAM: FLOW CHỐNG SPAM TẠO GIAO DỊCH                          ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝


┌──────────────────────────────────────────────────────────────────────────────┐
│  📊 FLOW 1: USER BẤM NÚT "TẠO ĐƠN HÀNG" (TRƯỚC KHI CÓ BẢO VỆ)              │
└──────────────────────────────────────────────────────────────────────────────┘

  ┌─────────────┐
  │   User      │
  │  Click 🖱️   │
  │  100 lần    │
  └──────┬──────┘
         │
         ├───────────────────────────────────────────────────────────┐
         │ ❌ KHÔNG CÓ KIỂM TRA                                       │
         │                                                            │
         ▼                                                            │
  ┌──────────────────┐                                               │
  │  Frontend        │                                               │
  │  index.html      │                                               │
  │                  │                                               │
  │  function        │                                               │
  │  createOrder() { │  ◄─── Gọi 100 lần                            │
  │    fetch(...)    │                                               │
  │  }               │                                               │
  └────────┬─────────┘                                               │
           │                                                          │
           │ POST /api/payment/create-order × 100                    │
           │                                                          │
           ▼                                                          │
  ┌──────────────────────────────────────┐                           │
  │  Backend (Flask)                     │                           │
  │  app.py                              │                           │
  │                                      │                           │
  │  @app.route('/api/payment/...')      │  ◄─── Xử lý 100 requests │
  │  def create_payment_order():         │                           │
  │    # ❌ Không kiểm tra rate limit    │                           │
  │    # ❌ Không kiểm tra pending order │                           │
  │                                      │                           │
  │    payos_result = create_payment...  │                           │
  │  }                                   │                           │
  └────────┬─────────────────────────────┘                           │
           │                                                          │
           │ PayOS API × 100                                          │
           │                                                          │
           ▼                                                          │
  ┌─────────────────────────────────────────┐                        │
  │  PayOS Server                           │                        │
  │                                         │                        │
  │  ✅ Tạo 100 giao dịch                   │  ◄─── GỌI 100 LẦN!   │
  │  ✅ Generate 100 QR codes               │                        │
  │  ✅ Lưu 100 orders vào PayOS DB         │                        │
  │                                         │                        │
  │  💰 Tính phí: 100 giao dịch            │                        │
  └─────────────────────────────────────────┘                        │
                                                                      │
  KẾT QUẢ:                                                           │
    ❌ 100 giao dịch được tạo                                        │
    ❌ Chi phí API tăng gấp 100 lần                                  │
    ❌ Database bị spam (100 pending orders)                         │
    ❌ PayOS Dashboard bị ngập giao dịch rác                         │
    💸 TỐN TIỀN KHÔNG CẦN THIẾT! ◄────────────────────────────────────┘




┌──────────────────────────────────────────────────────────────────────────────┐
│  📊 FLOW 2: USER BẤM NÚT (SAU KHI CÓ BẢO VỆ 4 LỚP)                         │
└──────────────────────────────────────────────────────────────────────────────┘

  ┌─────────────┐
  │   User      │
  │  Click 🖱️   │
  │  100 lần    │
  └──────┬──────┘
         │
         │
         ▼
  ╔══════════════════════════════════════════════════════════════════════╗
  ║  🛡️ LỚP 1: FRONTEND PROTECTION                                      ║
  ╚══════════════════════════════════════════════════════════════════════╝
  ┌──────────────────────────────────────────────────────────────────────┐
  │  Frontend (index.html)                                               │
  │                                                                      │
  │  let lastCreateTime = 0;                                             │
  │  const COOLDOWN_MS = 60000;                                          │
  │                                                                      │
  │  function createOrder() {                                            │
  │    // ✅ CHECK 1: Button đã disabled?                                │
  │    if (btn.disabled) {                                               │
  │      ❌ CHẶN (Request 2-100)                                         │
  │      return;  ────────────────────────────┐                         │
  │    }                                       │                         │
  │                                            │                         │
  │    // ✅ CHECK 2: Cooldown 60s             │                         │
  │    const now = Date.now();                 │                         │
  │    if (now - lastCreateTime < 60000) {     │                         │
  │      ❌ CHẶN (Request 2-100)               │                         │
  │      alert('⏰ Đợi 60s!');                 │                         │
  │      return;  ────────────────────────────┤                         │
  │    }                                       │                         │
  │                                            │                         │
  │    // ✅ Disable button                    │                         │
  │    btn.disabled = true;                    │                         │
  │    btn.innerText = '⏳ Đang tạo...';       │                         │
  │                                            │                         │
  │    // ✅ CHỈ GỌI 1 LẦN                     │                         │
  │    fetch('/api/payment/create-order', ...) │                         │
  │  }                                         │                         │
  └────────┬───────────────────────────────────┴─────────────────────────┘
           │                                    │
           │ POST × 1 (99 lần bị chặn ở đây)   │
           │                                    │
           ▼                                    │
  ╔═══════════════════════════════════════════════════════════════════╗  │
  ║  🛡️ LỚP 2: SERVER RATE LIMITING                                  ║  │
  ╚═══════════════════════════════════════════════════════════════════╝  │
  ┌─────────────────────────────────────────────────────────────────┐   │
  │  Backend (app.py)                                               │   │
  │                                                                 │   │
  │  from flask_limiter import Limiter                              │   │
  │  limiter = Limiter(app, key_func=get_remote_address)            │   │
  │                                                                 │   │
  │  @app.route('/api/payment/create-order', methods=['POST'])      │   │
  │  @limiter.limit("5 per minute")  # ✅ IP Rate Limit             │   │
  │  def create_payment_order():                                    │   │
  │    email = request.json['customer_email']                       │   │
  │                                                                 │   │
  │    // ✅ CHECK 3: Email Rate Limit (3/min)                      │   │
  │    if not check_email_rate_limit(email):                        │   │
  │      ❌ CHẶN (Nếu spam nhiều lần)                               │   │
  │      return {'error': 'Too many requests'}, 429  ──────────────┤   │
  │    }                                                            │   │
  │                                                                 │   │
  │    // ✅ Request được phép, tiếp tục...                         │   │
  └────────┬────────────────────────────────────────────────────────┘   │
           │                                                            │
           │ ✅ Pass rate limit                                         │
           │                                                            │
           ▼                                                            │
  ╔═══════════════════════════════════════════════════════════════════╗  │
  ║  🛡️ LỚP 3: BUSINESS LOGIC CHECK                                  ║  │
  ╚═══════════════════════════════════════════════════════════════════╝  │
  ┌─────────────────────────────────────────────────────────────────┐   │
  │  Backend (app.py) - continued                                   │   │
  │                                                                 │   │
  │  def create_payment_order():                                    │   │
  │    email = request.json['customer_email']                       │   │
  │                                                                 │   │
  │    // ✅ CHECK 4: Pending Orders                                │   │
  │    conn = get_db()                                              │   │
  │    cursor = conn.cursor()                                       │   │
  │    cursor.execute("""                                           │   │
  │      SELECT * FROM orders                                       │   │
  │      WHERE email = ? AND status = 'pending'                     │   │
  │      AND created_at > datetime('now', '-10 minutes')            │   │
  │    """, (email,))                                               │   │
  │    pending = cursor.fetchone()                                  │   │
  │                                                                 │   │
  │    if pending:                                                  │   │
  │      ❌ CHẶN (Đã có đơn pending)                                │   │
  │      return {                                                   │   │
  │        'error': 'Bạn đã có đơn chờ thanh toán',                 │   │
  │        'order_id': pending['order_id']                          │   │
  │      }, 400  ───────────────────────────────────────────────────┤   │
  │    }                                                            │   │
  │                                                                 │   │
  │    // ✅ OK, THẬT SỰ CẦN TẠO ORDER MỚI                          │   │
  │    // CHỈ BÂY GIỜ MỚI GỌI PAYOS API                             │   │
  │                                                                 │   │
  │    payos_result = create_payment_link(...)                      │   │
  └────────┬────────────────────────────────────────────────────────┘   │
           │                                                            │
           │ PayOS API × 1 (THẬT SỰ CẦN THIẾT)                          │
           │                                                            │
           ▼                                                            │
  ┌─────────────────────────────────────────┐                          │
  │  PayOS Server                           │                          │
  │                                         │                          │
  │  ✅ Tạo 1 giao dịch duy nhất            │  ◄─── CHỈ GỌI 1 LẦN!   │
  │  ✅ Generate 1 QR code                  │                          │
  │  ✅ Lưu 1 order vào PayOS DB            │                          │
  │                                         │                          │
  │  💰 Tính phí: 1 giao dịch              │                          │
  └─────────────────────────────────────────┘                          │
                                                                        │
  KẾT QUẢ:                                                             │
    ✅ CHỈ 1 giao dịch được tạo (99 lần bị chặn)                       │
    ✅ Chi phí API giảm 99%                                             │
    ✅ Database sạch (không có junk orders)                             │
    ✅ PayOS Dashboard clean                                            │
    💚 TIẾT KIỆM TIỀN! ◄─────────────────────────────────────────────────┘




┌──────────────────────────────────────────────────────────────────────────────┐
│  📊 FLOW 3: CHI TIẾT 4 LỚP BẢO VỆ                                           │
└──────────────────────────────────────────────────────────────────────────────┘


                            ┌─────────────────┐
                            │  User Click     │
                            │  "Tạo Đơn Hàng" │
                            └────────┬────────┘
                                     │
                     ┌───────────────┼───────────────┐
                     │      Client-Side Check        │
                     └───────────────┬───────────────┘
                                     │
                     ┌───────────────▼───────────────┐
                     │  🛡️ LỚP 1: FRONTEND          │
                     ├───────────────────────────────┤
                     │  ✓ Button disabled?           │
                     │  ✓ Cooldown < 60s?            │
                     └───────────┬───────────────────┘
                                 │
                        Yes: Chặn │ No: Tiếp tục
                                 │
                     ┌───────────▼───────────────┐
                     │  ❌ CHẶN                  │
                     │  Alert: "Đợi 60s!"        │
                     │  Return                   │
                     └───────────────────────────┘
                                 │
                                 │ ✅ Pass
                                 ▼
                     ┌───────────────────────────────┐
                     │  Gửi Request                  │
                     │  POST /api/payment/...        │
                     └───────────┬───────────────────┘
                                 │
                     ┌───────────┼───────────────┐
                     │   Server-Side Check       │
                     └───────────┼───────────────┘
                                 │
                     ┌───────────▼───────────────┐
                     │  🛡️ LỚP 2: RATE LIMIT    │
                     ├───────────────────────────┤
                     │  ✓ IP > 5/min?            │
                     │  ✓ Email > 3/min?         │
                     └───────────┬───────────────┘
                                 │
                        Yes: Chặn │ No: Tiếp tục
                                 │
                     ┌───────────▼───────────────┐
                     │  ❌ CHẶN                  │
                     │  HTTP 429                 │
                     │  Too Many Requests        │
                     └───────────────────────────┘
                                 │
                                 │ ✅ Pass
                                 ▼
                     ┌───────────────────────────────┐
                     │  🛡️ LỚP 3: BUSINESS LOGIC    │
                     ├───────────────────────────────┤
                     │  ✓ Check Database             │
                     │  ✓ Pending order exists?      │
                     └───────────┬───────────────────┘
                                 │
                        Yes: Chặn │ No: Tiếp tục
                                 │
                     ┌───────────▼───────────────┐
                     │  ❌ CHẶN                  │
                     │  HTTP 400                 │
                     │  "Đã có đơn pending"      │
                     └───────────────────────────┘
                                 │
                                 │ ✅ Pass
                                 ▼
                     ┌───────────────────────────────┐
                     │  ✅ GỌI PAYOS API             │
                     │  create_payment_link()        │
                     └───────────┬───────────────────┘
                                 │
                                 ▼
                     ┌───────────────────────────────┐
                     │  PayOS Server                 │
                     │  Tạo giao dịch                │
                     │  Tính phí                     │
                     └───────────────────────────────┘




┌──────────────────────────────────────────────────────────────────────────────┐
│  📊 FLOW 4: KỊ BẢN TẤN CÔNG VÀ PHÒNG THỦ                                    │
└──────────────────────────────────────────────────────────────────────────────┘


  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
  ┃  CASE 1: User Vô Tình Click Nhiều Lần                              ┃
  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

    User: Click 10 lần vì trang load chậm
      │
      ├─ Click 1: ✅ Pass → Gọi API
      │            Button disabled
      │            Cooldown active
      │
      ├─ Click 2-10: ❌ Chặn bởi LỚP 1 (Button disabled)
      │               Không gửi request
      │
      └─ Kết quả: 1 API call thay vì 10


  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
  ┃  CASE 2: Script Kiddie Spam Từ F12 Console                         ┃
  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

    Attacker: for(i=0; i<100; i++) { fetch(...) }
      │
      ├─ LỚP 1: ❌ Bypass (Script bỏ qua frontend check)
      │
      ├─ 100 requests gửi lên server
      │
      ├─ LỚP 2: ✅ CHẶN
      │   - IP rate limit: 5/min
      │   - Request 1-5: ✅ Pass
      │   - Request 6-100: ❌ Reject 429
      │
      └─ Kết quả: 5 API calls thay vì 100 (giảm 95%)


  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
  ┃  CASE 3: Spam Cùng Email                                            ┃
  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

    Attacker: Spam 50 requests với email test@test.com
      │
      ├─ LỚP 1: ❌ Bypass (Script)
      │
      ├─ LỚP 2: ✅ Chặn 1 phần
      │   - Email rate limit: 3/min
      │   - Request 1-3: ✅ Pass
      │   - Request 4-50: ❌ Reject 429
      │
      ├─ 3 requests pass rate limit
      │
      ├─ LỚP 3: ✅ CHẶN TIẾP
      │   - Request 1: ✅ Tạo order → PayOS API
      │   - Request 2-3: ❌ Pending order exists → Reject 400
      │
      └─ Kết quả: 1 API call thay vì 50 (giảm 98%)


  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
  ┃  CASE 4: Professional Attack (Botnet, Nhiều IP)                    ┃
  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

    Attacker: 100 bots × 10 requests = 1000 requests
      │
      ├─ LỚP 1: ❌ Bypass (Bot)
      │
      ├─ LỚP 2: ✅ Chặn 1 phần
      │   - Mỗi IP: 5 requests pass
      │   - 100 IPs × 5 = 500 requests pass
      │   - 500 requests bị chặn bởi IP rate limit
      │
      ├─ 500 requests pass (mỗi IP dùng email khác nhau)
      │
      ├─ LỚP 3: ✅ Chặn 1 phần
      │   - Nếu spam cùng email → Pending check chặn
      │   - Nếu email khác nhau → Pass
      │
      ├─ Worst case: 500 API calls
      │
      └─ LỚP 4: 🔒 CẦN CAPTCHA
          - reCAPTCHA v3 detect bot
          - Score < 0.5 → Reject
          - Chặn 99% bots
          - Kết quả: ~5 API calls


  ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
  ┃  SUMMARY: Hiệu Quả Các Lớp                                          ┃
  ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛

    ┌─────────────────────────┬───────────────────┬──────────────┐
    │  Loại Tấn Công          │  Lớp Chặn         │  % Chặn      │
    ├─────────────────────────┼───────────────────┼──────────────┤
    │  User vô tình           │  LỚP 1            │  90%         │
    │  Script kiddie          │  LỚP 2            │  95%         │
    │  Spam cùng email        │  LỚP 2 + LỚP 3    │  98%         │
    │  Professional (botnet)  │  LỚP 4 (CAPTCHA)  │  99%         │
    └─────────────────────────┴───────────────────┴──────────────┘




┌──────────────────────────────────────────────────────────────────────────────┐
│  📊 COST COMPARISON (SO SÁNH CHI PHÍ)                                        │
└──────────────────────────────────────────────────────────────────────────────┘

  Giả sử:
    - PayOS tính phí: $0.01 / giao dịch
    - Attack: 1000 requests/ngày

  ┌───────────────────────┬─────────────┬────────────┬──────────────┐
  │  Scenario             │  API Calls  │  Daily $   │  Monthly $   │
  ├───────────────────────┼─────────────┼────────────┼──────────────┤
  │  KHÔNG BẢO VỆ         │  1000       │  $10       │  $300        │
  ├───────────────────────┼─────────────┼────────────┼──────────────┤
  │  LỚP 1 (Frontend)     │  600        │  $6        │  $180        │
  ├───────────────────────┼─────────────┼────────────┼──────────────┤
  │  LỚP 1 + 2 (Rate)     │  100        │  $1        │  $30         │
  ├───────────────────────┼─────────────┼────────────┼──────────────┤
  │  LỚP 1 + 2 + 3 (DB)   │  20         │  $0.20     │  $6          │
  ├───────────────────────┼─────────────┼────────────┼──────────────┤
  │  ALL 4 LAYERS         │  10         │  $0.10     │  $3          │
  └───────────────────────┴─────────────┴────────────┴──────────────┘

  💰 Tiết kiệm: $297/tháng (99%)


╔══════════════════════════════════════════════════════════════════════════════╗
║                                                                              ║
║  🎯 KẾT LUẬN                                                                 ║
║                                                                              ║
║  ✅ 4 lớp bảo vệ = Chặn 90-99% spam attacks                                  ║
║  ✅ Chi phí API giảm 90-99%                                                  ║
║  ✅ User thật không bị ảnh hưởng                                             ║
║  ✅ Easy to implement (1-2 giờ)                                              ║
║                                                                              ║
╚══════════════════════════════════════════════════════════════════════════════╝

