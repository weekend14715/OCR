#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Multi-Account Gmail SMTP Sender
H·ªá th·ªëng g·ª≠i email t·ª± ƒë·ªông v·ªõi 3 t√†i kho·∫£n Gmail (1500 emails/ng√†y)
"""

import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import datetime
import json
import os
from pathlib import Path

class MultiAccountEmailSender:
    """
    Qu·∫£n l√Ω g·ª≠i email qua nhi·ªÅu t√†i kho·∫£n Gmail
    T·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi khi h·∫øt quota
    """
    
    def __init__(self, config_file='email_config.json'):
        """
        Kh·ªüi t·∫°o v·ªõi file config
        
        Args:
            config_file: ƒê∆∞·ªùng d·∫´n ƒë·∫øn file config JSON
        """
        self.config_file = config_file
        self.accounts = []
        self.smtp_server = "smtp.gmail.com"
        self.smtp_port = 587
        
        # Load ho·∫∑c t·∫°o config
        self._load_or_create_config()
    
    def _load_or_create_config(self):
        """Load config t·ª´ file ho·∫∑c t·∫°o m·ªõi"""
        
        if os.path.exists(self.config_file):
            # Load t·ª´ file
            with open(self.config_file, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.accounts = data.get('accounts', [])
            print(f"‚úÖ ƒê√£ load {len(self.accounts)} t√†i kho·∫£n t·ª´ {self.config_file}")
        else:
            # T·∫°o m·ªõi
            print(f"‚ö†Ô∏è  Ch∆∞a c√≥ file {self.config_file}")
            print("‚Üí Ch·∫°y setup_email_accounts() ƒë·ªÉ c·∫•u h√¨nh")
    
    def save_config(self):
        """L∆∞u config v√†o file"""
        
        data = {
            'accounts': self.accounts,
            'last_updated': datetime.datetime.now().isoformat()
        }
        
        with open(self.config_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, indent=4, ensure_ascii=False)
        
        print(f"‚úÖ ƒê√£ l∆∞u config v√†o {self.config_file}")
    
    def setup_accounts(self):
        """
        Setup 3 t√†i kho·∫£n Gmail (interactive)
        """
        
        print("\n" + "="*60)
        print("‚öôÔ∏è  SETUP T√ÄI KHO·∫¢N GMAIL")
        print("="*60 + "\n")
        
        print("Nh·∫≠p th√¥ng tin 3 t√†i kho·∫£n Gmail ƒë√£ t·∫°o:\n")
        
        accounts = []
        
        for i in range(3):
            print(f"{'‚îÄ'*60}")
            print(f"T√ÄI KHO·∫¢N {i+1}:")
            print(f"{'‚îÄ'*60}")
            
            email = input(f"Email {i+1}: ").strip()
            password = input(f"App Password {i+1}: ").strip()
            
            # X√≥a kho·∫£ng tr·∫Øng
            password = password.replace(" ", "")
            
            accounts.append({
                'email': email,
                'password': password,
                'daily_limit': 500,
                'sent_today': 0,
                'last_reset': datetime.date.today().isoformat()
            })
            
            print(f"‚úÖ ƒê√£ th√™m {email}\n")
        
        self.accounts = accounts
        self.save_config()
        
        print("\n" + "="*60)
        print("üéâ Setup ho√†n t·∫•t!")
        print("="*60 + "\n")
        
        # H·ªèi test
        test = input("B·∫°n c√≥ mu·ªën test g·ª≠i email kh√¥ng? (y/n): ").strip().lower()
        if test == 'y':
            receiver = input("Email nh·∫≠n: ").strip()
            print()
            for i, account in enumerate(self.accounts, 1):
                print(f"\nTest t√†i kho·∫£n {i}...")
                self.send_license_key(
                    to_email=receiver,
                    license_key="TEST-1234-5678-ABCD",
                    customer_name="Test User",
                    force_account_index=i-1
                )
    
    def _get_available_account(self):
        """
        T√¨m t√†i kho·∫£n c√≤n quota
        T·ª± ƒë·ªông reset counter m·ªói ng√†y
        """
        
        today = datetime.date.today().isoformat()
        
        for account in self.accounts:
            # Reset n·∫øu sang ng√†y m·ªõi
            if account['last_reset'] != today:
                account['sent_today'] = 0
                account['last_reset'] = today
                self.save_config()  # L∆∞u l·∫°i
            
            # T√¨m account c√≤n quota
            if account['sent_today'] < account['daily_limit']:
                return account
        
        return None
    
    def send_license_key(self, to_email, license_key, customer_name="Kh√°ch h√†ng", 
                        order_id=None, force_account_index=None):
        """
        G·ª≠i license key cho kh√°ch h√†ng
        
        Args:
            to_email: Email kh√°ch h√†ng
            license_key: License key
            customer_name: T√™n kh√°ch h√†ng
            order_id: M√£ ƒë∆°n h√†ng (optional)
            force_account_index: Force d√πng account c·ª• th·ªÉ (test only)
            
        Returns:
            dict: {'success': bool, 'message': str, 'account_used': str}
        """
        
        # Ch·ªçn account
        if force_account_index is not None:
            account = self.accounts[force_account_index]
        else:
            account = self._get_available_account()
        
        if not account:
            return {
                'success': False,
                'message': 'H·∫øt quota! ƒê√£ g·ª≠i >1500 emails h√¥m nay.',
                'account_used': None
            }
        
        try:
            # T·∫°o email
            msg = MIMEMultipart('alternative')
            msg['From'] = f"OCR Tool <{account['email']}>"
            msg['To'] = to_email
            msg['Subject'] = f"üéâ License Key OCR Tool - {license_key}"
            
            # N·ªôi dung HTML
            html = self._create_email_html(
                license_key=license_key,
                customer_name=customer_name,
                order_id=order_id
            )
            
            msg.attach(MIMEText(html, 'html'))
            
            # G·ª≠i email
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(account['email'], account['password'])
            server.send_message(msg)
            server.quit()
            
            # C·∫≠p nh·∫≠t counter
            account['sent_today'] += 1
            self.save_config()
            
            return {
                'success': True,
                'message': f'ƒê√£ g·ª≠i email t·ª´ {account["email"]}',
                'account_used': account['email'],
                'emails_sent_today': account['sent_today'],
                'emails_remaining': account['daily_limit'] - account['sent_today']
            }
            
        except Exception as e:
            return {
                'success': False,
                'message': f'L·ªói: {str(e)}',
                'account_used': account['email']
            }
    
    def _create_email_html(self, license_key, customer_name, order_id=None):
        """T·∫°o n·ªôi dung email HTML"""
        
        order_info = ""
        if order_id:
            order_info = f"<p><strong>M√£ ƒë∆°n h√†ng:</strong> {order_id}</p>"
        
        html = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: #f5f5f5;
            margin: 0;
            padding: 20px;
        }}
        .container {{
            max-width: 600px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }}
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 40px 30px;
            text-align: center;
        }}
        .header h1 {{
            margin: 0;
            font-size: 28px;
            font-weight: 600;
        }}
        .header .icon {{
            font-size: 48px;
            margin-bottom: 10px;
        }}
        .content {{
            padding: 40px 30px;
        }}
        .greeting {{
            font-size: 18px;
            color: #333;
            margin-bottom: 20px;
        }}
        .key-box {{
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            border: 3px dashed #667eea;
            border-radius: 8px;
            padding: 25px;
            margin: 30px 0;
            text-align: center;
        }}
        .key-label {{
            font-size: 14px;
            color: #666;
            margin-bottom: 10px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }}
        .key {{
            font-size: 26px;
            font-weight: bold;
            color: #667eea;
            font-family: 'Courier New', Consolas, monospace;
            letter-spacing: 3px;
            word-break: break-all;
            user-select: all;
        }}
        .steps {{
            background: #f8f9fa;
            border-radius: 8px;
            padding: 25px;
            margin: 30px 0;
        }}
        .steps h3 {{
            margin: 0 0 20px 0;
            color: #333;
            font-size: 18px;
        }}
        .step {{
            padding: 15px 0;
            border-bottom: 1px solid #e0e0e0;
            display: flex;
            align-items: center;
        }}
        .step:last-child {{
            border-bottom: none;
        }}
        .step-number {{
            background: #667eea;
            color: white;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 15px;
            flex-shrink: 0;
        }}
        .step-text {{
            color: #555;
            flex: 1;
        }}
        .info-box {{
            background: #fff3cd;
            border-left: 4px solid #ffc107;
            padding: 15px 20px;
            margin: 20px 0;
            border-radius: 4px;
        }}
        .info-box p {{
            margin: 5px 0;
            color: #856404;
        }}
        .support {{
            background: #e7f3ff;
            border-radius: 8px;
            padding: 20px;
            margin: 30px 0;
            text-align: center;
        }}
        .support h4 {{
            margin: 0 0 10px 0;
            color: #0066cc;
        }}
        .support p {{
            margin: 5px 0;
            color: #555;
        }}
        .footer {{
            background: #2c3e50;
            color: white;
            text-align: center;
            padding: 30px;
        }}
        .footer p {{
            margin: 5px 0;
            opacity: 0.9;
        }}
        .footer .social {{
            margin-top: 15px;
        }}
        .footer .social a {{
            color: white;
            text-decoration: none;
            margin: 0 10px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="icon">üéâ</div>
            <h1>C·∫£m ∆°n b·∫°n ƒë√£ mua OCR Tool!</h1>
        </div>
        
        <div class="content">
            <div class="greeting">
                <p>Xin ch√†o <strong>{customer_name}</strong>,</p>
            </div>
            
            <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† mua <strong>Vietnamese OCR Tool</strong>. License key c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng!</p>
            
            {order_info}
            
            <div class="key-box">
                <div class="key-label">License Key c·ªßa b·∫°n</div>
                <div class="key">{license_key}</div>
            </div>
            
            <div class="info-box">
                <p><strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong></p>
                <p>‚Ä¢ H√£y l∆∞u l·∫°i license key n√†y c·∫©n th·∫≠n</p>
                <p>‚Ä¢ M·ªói key ch·ªâ k√≠ch ho·∫°t ƒë∆∞·ª£c tr√™n 1 m√°y t√≠nh</p>
                <p>‚Ä¢ Key c√≥ hi·ªáu l·ª±c vƒ©nh vi·ªÖn</p>
            </div>
            
            <div class="steps">
                <h3>üìã H∆∞·ªõng d·∫´n k√≠ch ho·∫°t</h3>
                
                <div class="step">
                    <div class="step-number">1</div>
                    <div class="step-text">M·ªü ph·∫ßn m·ªÅm <strong>OCR Tool</strong></div>
                </div>
                
                <div class="step">
                    <div class="step-number">2</div>
                    <div class="step-text">Click n√∫t <strong>"K√≠ch ho·∫°t b·∫£n quy·ªÅn"</strong></div>
                </div>
                
                <div class="step">
                    <div class="step-number">3</div>
                    <div class="step-text">Copy v√† paste <strong>license key</strong> ·ªü tr√™n</div>
                </div>
                
                <div class="step">
                    <div class="step-number">4</div>
                    <div class="step-text">Click <strong>"K√≠ch ho·∫°t"</strong></div>
                </div>
                
                <div class="step">
                    <div class="step-number">5</div>
                    <div class="step-text">Ho√†n t·∫•t! B·∫°n ƒë√£ c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng üéâ</div>
                </div>
            </div>
            
            <div class="support">
                <h4>üí¨ C·∫ßn h·ªó tr·ª£?</h4>
                <p>N·∫øu g·∫∑p v·∫•n ƒë·ªÅ khi k√≠ch ho·∫°t, vui l√≤ng li√™n h·ªá:</p>
                <p><strong>Email:</strong> hoangtuan.th484@gmail.com</p>
                <p>Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong v√≤ng 24 gi·ªù!</p>
            </div>
            
            <p style="margin-top: 30px; color: #666; font-size: 14px;">
                Ch√∫c b·∫°n s·ª≠ d·ª•ng ph·∫ßn m·ªÅm hi·ªáu qu·∫£!<br>
                <strong>Team OCR Tool</strong>
            </p>
        </div>
        
        <div class="footer">
            <p><strong>Vietnamese OCR Tool</strong></p>
            <p>C√¥ng c·ª• OCR ti·∫øng Vi·ªát chuy√™n nghi·ªáp</p>
            <p style="margin-top: 15px; font-size: 12px;">
                Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng reply.
            </p>
        </div>
    </div>
</body>
</html>
        """
        
        return html
    
    def get_status(self):
        """
        L·∫•y tr·∫°ng th√°i c√°c t√†i kho·∫£n
        
        Returns:
            dict: Th√¥ng tin tr·∫°ng th√°i
        """
        
        today = datetime.date.today().isoformat()
        total_sent = 0
        total_remaining = 0
        
        status = []
        
        for i, account in enumerate(self.accounts, 1):
            # Reset n·∫øu c·∫ßn
            if account['last_reset'] != today:
                account['sent_today'] = 0
                account['last_reset'] = today
            
            sent = account['sent_today']
            remaining = account['daily_limit'] - sent
            
            total_sent += sent
            total_remaining += remaining
            
            status.append({
                'account_number': i,
                'email': account['email'],
                'sent_today': sent,
                'remaining': remaining,
                'limit': account['daily_limit'],
                'percentage_used': (sent / account['daily_limit']) * 100
            })
        
        return {
            'accounts': status,
            'total_sent_today': total_sent,
            'total_remaining': total_remaining,
            'total_limit': len(self.accounts) * 500,
            'date': today
        }
    
    def print_status(self):
        """In ra tr·∫°ng th√°i c√°c t√†i kho·∫£n"""
        
        status = self.get_status()
        
        print("\n" + "="*70)
        print(f"üìä TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG EMAIL - {status['date']}")
        print("="*70 + "\n")
        
        for acc in status['accounts']:
            used_bar = "‚ñà" * int(acc['percentage_used'] / 5)
            empty_bar = "‚ñë" * (20 - len(used_bar))
            
            print(f"T√ÄI KHO·∫¢N {acc['account_number']}: {acc['email']}")
            print(f"  [{used_bar}{empty_bar}] {acc['sent_today']}/{acc['limit']} emails")
            print(f"  C√≤n l·∫°i: {acc['remaining']} emails\n")
        
        print("‚îÄ"*70)
        print(f"T·ªîNG: {status['total_sent_today']}/{status['total_limit']} emails")
        print(f"C√íN L·∫†I: {status['total_remaining']} emails")
        print("="*70 + "\n")


# ============================================================================
# COMMAND LINE INTERFACE
# ============================================================================

def main():
    """CLI ƒë·ªÉ qu·∫£n l√Ω email sender"""
    
    import sys
    
    sender = MultiAccountEmailSender()
    
    if len(sys.argv) == 1:
        # Interactive mode
        print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                               ‚ïë
‚ïë        üìß MULTI-ACCOUNT GMAIL SMTP SENDER                    ‚ïë
‚ïë        OCR Tool License System                                ‚ïë
‚ïë                                                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Ch·ª©c nƒÉng:
  1. Setup t√†i kho·∫£n
  2. G·ª≠i email test
  3. Xem tr·∫°ng th√°i
  4. Tho√°t

""")
        
        while True:
            choice = input("Ch·ªçn (1-4): ").strip()
            
            if choice == '1':
                sender.setup_accounts()
                
            elif choice == '2':
                if not sender.accounts:
                    print("\n‚ùå Ch∆∞a setup t√†i kho·∫£n! Ch·ªçn 1 ƒë·ªÉ setup.\n")
                    continue
                
                to_email = input("\nEmail nh·∫≠n: ").strip()
                result = sender.send_license_key(
                    to_email=to_email,
                    license_key="TEST-1234-5678-ABCD",
                    customer_name="Test User"
                )
                
                if result['success']:
                    print(f"\n‚úÖ {result['message']}")
                    print(f"üìß ƒê√£ g·ª≠i: {result['emails_sent_today']}")
                    print(f"üìß C√≤n l·∫°i: {result['emails_remaining']}\n")
                else:
                    print(f"\n‚ùå {result['message']}\n")
                
            elif choice == '3':
                if not sender.accounts:
                    print("\n‚ùå Ch∆∞a setup t√†i kho·∫£n!\n")
                    continue
                sender.print_status()
                
            elif choice == '4':
                print("\nüëã T·∫°m bi·ªát!\n")
                break
                
            else:
                print("\n‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!\n")


if __name__ == "__main__":
    main()

