#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Email Sender - OCR Tool License System
G·ª≠i license key t·ª± ƒë·ªông sau khi thanh to√°n
"""

import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
import datetime
import json
import os
from pathlib import Path
from email_config import (
    EMAIL_ACCOUNTS, SMTP_SERVER, SMTP_PORT, SMTP_USE_TLS,
    DEFAULT_FROM_NAME, SUPPORT_EMAIL
)


class LicenseEmailSender:
    """
    G·ª≠i license key qua email
    T·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi gi·ªØa 2 t√†i kho·∫£n khi h·∫øt quota
    """
    
    def __init__(self, usage_file='email_usage.json'):
        """
        Kh·ªüi t·∫°o email sender
        
        Args:
            usage_file: File l∆∞u th√¥ng tin usage tracking
        """
        self.usage_file = usage_file
        self.accounts = EMAIL_ACCOUNTS
        self.smtp_server = SMTP_SERVER
        self.smtp_port = SMTP_PORT
        self.usage_data = self._load_usage()
    
    def _load_usage(self):
        """Load usage data t·ª´ file"""
        if os.path.exists(self.usage_file):
            try:
                with open(self.usage_file, 'r', encoding='utf-8') as f:
                    return json.load(f)
            except:
                pass
        
        # Initialize usage data
        today = datetime.date.today().isoformat()
        return {
            'date': today,
            'accounts': {
                acc['email']: {
                    'sent_today': 0,
                    'last_reset': today
                }
                for acc in self.accounts
            }
        }
    
    def _save_usage(self):
        """L∆∞u usage data v√†o file"""
        try:
            with open(self.usage_file, 'w', encoding='utf-8') as f:
                json.dump(self.usage_data, f, indent=4, ensure_ascii=False)
        except Exception as e:
            print(f"Warning: Could not save usage data: {e}")
    
    def _get_available_account(self):
        """
        T√¨m t√†i kho·∫£n c√≤n quota
        T·ª± ƒë·ªông reset counter m·ªói ng√†y
        
        Returns:
            dict: Account info or None
        """
        today = datetime.date.today().isoformat()
        
        # Reset n·∫øu sang ng√†y m·ªõi
        if self.usage_data['date'] != today:
            self.usage_data['date'] = today
            for email in self.usage_data['accounts']:
                self.usage_data['accounts'][email] = {
                    'sent_today': 0,
                    'last_reset': today
                }
            self._save_usage()
        
        # T√¨m account c√≤n quota
        for account in self.accounts:
            email = account['email']
            usage = self.usage_data['accounts'].get(email, {})
            sent_today = usage.get('sent_today', 0)
            
            if sent_today < account['daily_limit']:
                return account
        
        return None
    
    def send_license_key(self, to_email, license_key, customer_name="Kh√°ch h√†ng", 
                        order_id=None, plan_type="lifetime"):
        """
        G·ª≠i license key cho kh√°ch h√†ng
        
        Args:
            to_email: Email kh√°ch h√†ng
            license_key: License key
            customer_name: T√™n kh√°ch h√†ng
            order_id: M√£ ƒë∆°n h√†ng (optional)
            plan_type: Lo·∫°i g√≥i (lifetime/yearly/monthly)
            
        Returns:
            dict: {'success': bool, 'message': str, 'account_used': str}
        """
        
        # Ch·ªçn account
        account = self._get_available_account()
        
        if not account:
            return {
                'success': False,
                'message': 'H·∫øt quota! ƒê√£ g·ª≠i >1000 emails h√¥m nay.',
                'account_used': None
            }
        
        try:
            # T·∫°o email
            msg = MIMEMultipart('alternative')
            msg['From'] = f"{DEFAULT_FROM_NAME} <{account['email']}>"
            msg['To'] = to_email
            msg['Subject'] = f"üéâ License Key OCR Tool - {license_key}"
            
            # N·ªôi dung HTML
            html = self._create_email_html(
                license_key=license_key,
                customer_name=customer_name,
                order_id=order_id,
                plan_type=plan_type
            )
            
            msg.attach(MIMEText(html, 'html'))
            
            # G·ª≠i email
            server = smtplib.SMTP(self.smtp_server, self.smtp_port)
            server.starttls()
            server.login(account['email'], account['password'])
            server.send_message(msg)
            server.quit()
            
            # C·∫≠p nh·∫≠t counter
            email = account['email']
            self.usage_data['accounts'][email]['sent_today'] += 1
            self._save_usage()
            
            sent_today = self.usage_data['accounts'][email]['sent_today']
            remaining = account['daily_limit'] - sent_today
            
            return {
                'success': True,
                'message': f'ƒê√£ g·ª≠i email t·ª´ {account["email"]}',
                'account_used': account['email'],
                'emails_sent_today': sent_today,
                'emails_remaining': remaining
            }
            
        except smtplib.SMTPAuthenticationError as e:
            return {
                'success': False,
                'message': f'L·ªói x√°c th·ª±c: {str(e)}. Ki·ªÉm tra email/password.',
                'account_used': account['email']
            }
        except smtplib.SMTPException as e:
            return {
                'success': False,
                'message': f'L·ªói SMTP: {str(e)}',
                'account_used': account['email']
            }
        except Exception as e:
            return {
                'success': False,
                'message': f'L·ªói: {str(e)}',
                'account_used': account['email']
            }
    
    def _create_email_html(self, license_key, customer_name, order_id=None, plan_type="lifetime"):
        """T·∫°o n·ªôi dung email HTML ƒë·∫πp"""
        
        # Th√¥ng tin plan
        plan_names = {
            'lifetime': 'Vƒ©nh vi·ªÖn',
            'yearly': '1 nƒÉm',
            'monthly': '1 th√°ng'
        }
        plan_name = plan_names.get(plan_type, 'Vƒ©nh vi·ªÖn')
        
        order_info = ""
        if order_id:
            order_info = f"<p><strong>M√£ ƒë∆°n h√†ng:</strong> {order_id}</p>"
        
        html = f"""
<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            background-color: #f5f5f5;
            margin: 0;
            padding: 20px;
        }}
        .container {{
            max-width: 600px;
            margin: 0 auto;
            background: white;
            border-radius: 12px;
            overflow: hidden;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }}
        .header {{
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 40px 30px;
            text-align: center;
        }}
        .header h1 {{
            margin: 0;
            font-size: 28px;
            font-weight: 600;
        }}
        .header .icon {{
            font-size: 48px;
            margin-bottom: 10px;
        }}
        .content {{
            padding: 40px 30px;
        }}
        .greeting {{
            font-size: 18px;
            color: #333;
            margin-bottom: 20px;
        }}
        .key-box {{
            background: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%);
            border: 3px dashed #667eea;
            border-radius: 8px;
            padding: 25px;
            margin: 30px 0;
            text-align: center;
        }}
        .key-label {{
            font-size: 14px;
            color: #666;
            margin-bottom: 10px;
            text-transform: uppercase;
            letter-spacing: 1px;
        }}
        .key {{
            font-size: 26px;
            font-weight: bold;
            color: #667eea;
            font-family: 'Courier New', Consolas, monospace;
            letter-spacing: 3px;
            word-break: break-all;
            user-select: all;
        }}
        .plan-badge {{
            display: inline-block;
            background: #ffc107;
            color: #000;
            padding: 5px 15px;
            border-radius: 20px;
            font-weight: bold;
            font-size: 14px;
            margin-top: 10px;
        }}
        .steps {{
            background: #f8f9fa;
            border-radius: 8px;
            padding: 25px;
            margin: 30px 0;
        }}
        .steps h3 {{
            margin: 0 0 20px 0;
            color: #333;
            font-size: 18px;
        }}
        .step {{
            padding: 15px 0;
            border-bottom: 1px solid #e0e0e0;
            display: flex;
            align-items: center;
        }}
        .step:last-child {{
            border-bottom: none;
        }}
        .step-number {{
            background: #667eea;
            color: white;
            width: 32px;
            height: 32px;
            border-radius: 50%;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            font-weight: bold;
            margin-right: 15px;
            flex-shrink: 0;
        }}
        .step-text {{
            color: #555;
            flex: 1;
        }}
        .info-box {{
            background: #fff3cd;
            border-left: 4px solid #ffc107;
            padding: 15px 20px;
            margin: 20px 0;
            border-radius: 4px;
        }}
        .info-box p {{
            margin: 5px 0;
            color: #856404;
        }}
        .support {{
            background: #e7f3ff;
            border-radius: 8px;
            padding: 20px;
            margin: 30px 0;
            text-align: center;
        }}
        .support h4 {{
            margin: 0 0 10px 0;
            color: #0066cc;
        }}
        .support p {{
            margin: 5px 0;
            color: #555;
        }}
        .footer {{
            background: #2c3e50;
            color: white;
            text-align: center;
            padding: 30px;
        }}
        .footer p {{
            margin: 5px 0;
            opacity: 0.9;
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <div class="icon">üéâ</div>
            <h1>C·∫£m ∆°n b·∫°n ƒë√£ mua OCR Tool!</h1>
        </div>
        
        <div class="content">
            <div class="greeting">
                <p>Xin ch√†o <strong>{customer_name}</strong>,</p>
            </div>
            
            <p>C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† mua <strong>Vietnamese OCR Tool</strong>. License key c·ªßa b·∫°n ƒë√£ s·∫µn s√†ng!</p>
            
            {order_info}
            
            <div class="key-box">
                <div class="key-label">License Key c·ªßa b·∫°n</div>
                <div class="key">{license_key}</div>
                <div class="plan-badge">G√≥i {plan_name}</div>
            </div>
            
            <div class="info-box">
                <p><strong>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</strong></p>
                <p>‚Ä¢ H√£y l∆∞u l·∫°i license key n√†y c·∫©n th·∫≠n</p>
                <p>‚Ä¢ M·ªói key ch·ªâ k√≠ch ho·∫°t ƒë∆∞·ª£c tr√™n 1 m√°y t√≠nh</p>
                <p>‚Ä¢ Key c√≥ hi·ªáu l·ª±c: {plan_name}</p>
            </div>
            
            <div class="steps">
                <h3>üìã H∆∞·ªõng d·∫´n k√≠ch ho·∫°t</h3>
                
                <div class="step">
                    <div class="step-number">1</div>
                    <div class="step-text">M·ªü ph·∫ßn m·ªÅm <strong>OCR Tool</strong></div>
                </div>
                
                <div class="step">
                    <div class="step-number">2</div>
                    <div class="step-text">Click n√∫t <strong>"K√≠ch ho·∫°t b·∫£n quy·ªÅn"</strong></div>
                </div>
                
                <div class="step">
                    <div class="step-number">3</div>
                    <div class="step-text">Copy v√† paste <strong>license key</strong> ·ªü tr√™n</div>
                </div>
                
                <div class="step">
                    <div class="step-number">4</div>
                    <div class="step-text">Click <strong>"K√≠ch ho·∫°t"</strong></div>
                </div>
                
                <div class="step">
                    <div class="step-number">5</div>
                    <div class="step-text">Ho√†n t·∫•t! B·∫°n ƒë√£ c√≥ th·ªÉ s·ª≠ d·ª•ng ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng üéâ</div>
                </div>
            </div>
            
            <div class="support">
                <h4>üí¨ C·∫ßn h·ªó tr·ª£?</h4>
                <p>N·∫øu g·∫∑p v·∫•n ƒë·ªÅ khi k√≠ch ho·∫°t, vui l√≤ng li√™n h·ªá:</p>
                <p><strong>Email:</strong> {SUPPORT_EMAIL}</p>
                <p>Ch√∫ng t√¥i s·∫Ω ph·∫£n h·ªìi trong v√≤ng 24 gi·ªù!</p>
            </div>
            
            <p style="margin-top: 30px; color: #666; font-size: 14px;">
                Ch√∫c b·∫°n s·ª≠ d·ª•ng ph·∫ßn m·ªÅm hi·ªáu qu·∫£!<br>
                <strong>Team OCR Tool</strong>
            </p>
        </div>
        
        <div class="footer">
            <p><strong>Vietnamese OCR Tool</strong></p>
            <p>C√¥ng c·ª• OCR ti·∫øng Vi·ªát chuy√™n nghi·ªáp</p>
            <p style="margin-top: 15px; font-size: 12px;">
                Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng reply.
            </p>
        </div>
    </div>
</body>
</html>
        """
        
        return html
    
    def get_status(self):
        """
        L·∫•y tr·∫°ng th√°i c√°c t√†i kho·∫£n
        
        Returns:
            dict: Th√¥ng tin usage
        """
        today = datetime.date.today().isoformat()
        
        # Reset n·∫øu sang ng√†y m·ªõi
        if self.usage_data['date'] != today:
            self.usage_data['date'] = today
            for email in self.usage_data['accounts']:
                self.usage_data['accounts'][email] = {
                    'sent_today': 0,
                    'last_reset': today
                }
            self._save_usage()
        
        status = []
        total_sent = 0
        total_remaining = 0
        
        for account in self.accounts:
            email = account['email']
            usage = self.usage_data['accounts'].get(email, {})
            sent = usage.get('sent_today', 0)
            remaining = account['daily_limit'] - sent
            
            total_sent += sent
            total_remaining += remaining
            
            status.append({
                'email': email,
                'sent_today': sent,
                'remaining': remaining,
                'limit': account['daily_limit'],
                'percentage_used': (sent / account['daily_limit']) * 100
            })
        
        return {
            'date': today,
            'accounts': status,
            'total_sent': total_sent,
            'total_remaining': total_remaining,
            'total_limit': sum(acc['daily_limit'] for acc in self.accounts)
        }


# ============================================================================
# STANDALONE FUNCTIONS
# ============================================================================

# Global instance
_sender_instance = None

def get_sender():
    """Get singleton instance"""
    global _sender_instance
    if _sender_instance is None:
        _sender_instance = LicenseEmailSender()
    return _sender_instance


def send_license_email(to_email, license_key, customer_name="Kh√°ch h√†ng", 
                      order_id=None, plan_type="lifetime"):
    """
    Shortcut function ƒë·ªÉ g·ª≠i license email
    
    Args:
        to_email: Email kh√°ch h√†ng
        license_key: License key
        customer_name: T√™n kh√°ch h√†ng
        order_id: M√£ ƒë∆°n h√†ng
        plan_type: Lo·∫°i g√≥i
        
    Returns:
        dict: K·∫øt qu·∫£ g·ª≠i email
    """
    sender = get_sender()
    return sender.send_license_key(
        to_email=to_email,
        license_key=license_key,
        customer_name=customer_name,
        order_id=order_id,
        plan_type=plan_type
    )


# ============================================================================
# CLI
# ============================================================================

if __name__ == '__main__':
    import sys
    
    sender = LicenseEmailSender()
    
    print("""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                                                               ‚ïë
‚ïë        üìß LICENSE EMAIL SENDER - OCR TOOL                     ‚ïë
‚ïë                                                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Ch·ª©c nƒÉng:
  1. G·ª≠i email test
  2. Xem tr·∫°ng th√°i
  3. Tho√°t
""")
    
    while True:
        choice = input("\nCh·ªçn (1-3): ").strip()
        
        if choice == '1':
            print("\n" + "‚îÄ"*60)
            to_email = input("Email nh·∫≠n: ").strip()
            
            result = sender.send_license_key(
                to_email=to_email,
                license_key="TEST-1234-5678-ABCD",
                customer_name="Ng∆∞·ªùi d√πng Test",
                order_id="TEST-ORDER-001",
                plan_type="lifetime"
            )
            
            print("\n" + "="*60)
            if result['success']:
                print(f"‚úÖ {result['message']}")
                print(f"üìß ƒê√£ g·ª≠i: {result['emails_sent_today']}")
                print(f"üìß C√≤n l·∫°i: {result['emails_remaining']}")
            else:
                print(f"‚ùå {result['message']}")
            print("="*60)
            
        elif choice == '2':
            status = sender.get_status()
            
            print("\n" + "="*60)
            print(f"üìä TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG EMAIL - {status['date']}")
            print("="*60)
            
            for i, acc in enumerate(status['accounts'], 1):
                bar_length = 20
                used_bar = "‚ñà" * int(acc['percentage_used'] / 5)
                empty_bar = "‚ñë" * (bar_length - len(used_bar))
                
                print(f"\nT√ÄI KHO·∫¢N {i}: {acc['email']}")
                print(f"  [{used_bar}{empty_bar}] {acc['sent_today']}/{acc['limit']} emails")
                print(f"  C√≤n l·∫°i: {acc['remaining']} emails")
            
            print("\n" + "‚îÄ"*60)
            print(f"T·ªîNG: {status['total_sent']}/{status['total_limit']} emails")
            print(f"C√íN L·∫†I: {status['total_remaining']} emails")
            print("="*60)
            
        elif choice == '3':
            print("\nüëã T·∫°m bi·ªát!\n")
            break
            
        else:
            print("\n‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")

