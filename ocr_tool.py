import keyboard
from PIL import Image, ImageGrab, ImageEnhance, ImageFilter
import pytesseract
import pyperclip
import tkinter as tk
from tkinter import font as tkFont, messagebox
from threading import Thread
import ctypes
import time
import configparser
import sys
import os
import signal
from pystray import MenuItem as item, Icon
import numpy as np

# Import License Manager
from license import LicenseManager

# Import Hotkey Manager
from Hotkey.hotkey_manager import HotkeyManager

# --- C·∫§U H√åNH ---

APP_NAME = "VietnameseOCRTool" 
CONFIG_DIR = os.path.join(os.getenv('LOCALAPPDATA'), APP_NAME) 
os.makedirs(CONFIG_DIR, exist_ok=True) 
CONFIG_FILE = os.path.join(CONFIG_DIR, 'config.ini')
ICON_FILE = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'app_icon.ico')

def get_tesseract_path():
    """T√¨m ƒë∆∞·ªùng d·∫´n ƒë·∫øn tesseract.exe m·ªôt c√°ch linh ƒë·ªông."""
    if getattr(sys, 'frozen', False):
        application_path = os.path.dirname(sys.executable)
        tesseract_path = os.path.join(application_path, 'Tesseract-OCR', 'tesseract.exe')
    else:
        tesseract_path = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
    
    print(f"Duong dan Tesseract duoc su dung: {tesseract_path}")
    return tesseract_path

try:
    pytesseract.pytesseract.tesseract_cmd = get_tesseract_path()
except Exception as e:
    print(f"Loi khi thiet lap Tesseract: {e}")

# --- BI·∫æN TO√ÄN C·ª§C ---
hotkey_manager = None
app_icon = None

def cleanup_and_exit():
    """Cleanup to√†n b·ªô v√† tho√°t ·ª©ng d·ª•ng."""
    global hotkey_manager, app_icon
    
    print("\nDang cleanup...")
    
    # Cleanup hotkey manager
    if hotkey_manager:
        try:
            hotkey_manager.cleanup()
        except:
            pass
    
    # Cleanup pystray
    try:
        if app_icon:
            app_icon.stop()
        import pystray
        pystray.Icon.stop_all()
    except:
        pass
    
    print("Cleanup hoan tat")
    os._exit(0)

def signal_handler(signum, frame):
    """X·ª≠ l√Ω signal ƒë·ªÉ cleanup khi app b·ªã terminate."""
    cleanup_and_exit()

# ==============================================================================
# PH·∫¶N X·ª¨ L√ù DPI V√Ä GIAO DI·ªÜN CH·ªåN V√ôNG
# ==============================================================================

def set_dpi_awareness():
    """C·∫£i thi·ªán ƒë·ªô s·∫Øc n√©t c·ªßa giao di·ªán tr√™n m√†n h√¨nh c√≥ ƒë·ªô ph√¢n gi·∫£i cao."""
    try:
        ctypes.windll.shcore.SetProcessDpiAwareness(2)
    except Exception:
        try:
            ctypes.windll.user32.SetProcessDPIAware()
        except Exception:
            pass

# ==============================================================================
# PH·∫¶N TI·ªÄN X·ª¨ L√ù ·∫¢NH T·ªêI ∆ØU
# ==============================================================================

def preprocess_image(image):
    """
    Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·ªÉ t·ªëi ∆∞u h√≥a ch·∫•t l∆∞·ª£ng OCR.
    
    C√°c b∆∞·ªõc x·ª≠ l√Ω:
    1. Chuy·ªÉn sang grayscale (gi·∫£m nhi·ªÖu m√†u)
    2. TƒÉng k√≠ch th∆∞·ªõc ·∫£nh (upscaling) - gi√∫p Tesseract nh·∫≠n d·∫°ng t·ªët h∆°n
    3. C√¢n b·∫±ng histogram (tƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n t·ª± ƒë·ªông)
    4. Kh·ª≠ nhi·ªÖu adaptive
    5. √Åp d·ª•ng adaptive threshold th√¥ng minh
    6. L√†m s·∫°ch nhi·ªÖu salt-and-pepper
    """
    try:
        # B∆∞·ªõc 1: Chuy·ªÉn sang grayscale
        gray_image = image.convert('L')
        print("üé® ƒê√£ chuy·ªÉn ·∫£nh sang m√†u x√°m")
        
        # B∆∞·ªõc 2: Upscaling - tƒÉng k√≠ch th∆∞·ªõc ·∫£nh l√™n 3x (tƒÉng t·ª´ 2x l√™n 3x)
        # Tesseract ho·∫°t ƒë·ªông t·ªët h∆°n v·ªõi ·∫£nh c√≥ ƒë·ªô ph√¢n gi·∫£i cao
        width, height = gray_image.size
        scale_factor = 3
        gray_image = gray_image.resize((width * scale_factor, height * scale_factor), Image.LANCZOS)
        print(f"üìê ƒê√£ tƒÉng k√≠ch th∆∞·ªõc ·∫£nh: {width}x{height} ‚Üí {width*scale_factor}x{height*scale_factor}")
        
        # B∆∞·ªõc 3: C√¢n b·∫±ng histogram ƒë·ªÉ tƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n t·ª± ƒë·ªông
        equalized_image = equalize_histogram(gray_image)
        print("üìä ƒê√£ c√¢n b·∫±ng histogram")
        
        # B∆∞·ªõc 4: TƒÉng ƒë·ªô s·∫Øc n√©t
        sharpness_enhancer = ImageEnhance.Sharpness(equalized_image)
        sharp_image = sharpness_enhancer.enhance(2.5)
        print("‚ú® ƒê√£ tƒÉng ƒë·ªô s·∫Øc n√©t")
        
        # B∆∞·ªõc 5: √Åp d·ª•ng adaptive threshold th√¥ng minh
        threshold_image = apply_adaptive_threshold(sharp_image)
        print("‚ö´‚ö™ ƒê√£ √°p d·ª•ng adaptive threshold")
        
        # B∆∞·ªõc 6: Kh·ª≠ nhi·ªÖu salt-and-pepper (nhi·ªÖu ƒëi·ªÉm tr·∫Øng ƒëen)
        cleaned_image = remove_noise(threshold_image)
        print("Da lam sach nhieu")
        
        # B∆∞·ªõc 7: L√†m m·ªãn vi·ªÅn ch·ªØ (morphological operations)
        final_image = smooth_text(cleaned_image)
        print("üéØ ƒê√£ l√†m m·ªãn vi·ªÅn ch·ªØ")
        
        return final_image
        
    except Exception as e:
        print(f"Loi khi tien xu ly anh: {e}")
        # N·∫øu c√≥ l·ªói, tr·∫£ v·ªÅ ·∫£nh grayscale ƒë∆°n gi·∫£n
        return image.convert('L')

def apply_threshold(image):
    """
    √Åp d·ª•ng adaptive threshold ƒë·ªÉ t·∫°o ·∫£nh ƒëen tr·∫Øng r√µ r√†ng.
    S·ª≠ d·ª•ng Otsu's method ƒë·ªÉ t·ª± ƒë·ªông t√¨m ng∆∞·ª°ng t·ªëi ∆∞u.
    """
    try:
        # Chuy·ªÉn PIL Image sang numpy array
        img_array = np.array(image)
        
        # T√≠nh histogram
        hist, bins = np.histogram(img_array.flatten(), bins=256, range=[0, 256])
        
        # Otsu's method ƒë·ªÉ t√¨m threshold t·ªëi ∆∞u
        total_pixels = img_array.size
        current_max = 0
        threshold = 0
        sum_total = np.sum(np.arange(256) * hist)
        sum_background = 0
        weight_background = 0
        
        for i in range(256):
            weight_background += hist[i]
            if weight_background == 0:
                continue
            
            weight_foreground = total_pixels - weight_background
            if weight_foreground == 0:
                break
            
            sum_background += i * hist[i]
            mean_background = sum_background / weight_background
            mean_foreground = (sum_total - sum_background) / weight_foreground
            
            variance_between = weight_background * weight_foreground * \
                             (mean_background - mean_foreground) ** 2
            
            if variance_between > current_max:
                current_max = variance_between
                threshold = i
        
        # √Åp d·ª•ng threshold
        binary_array = np.where(img_array > threshold, 255, 0).astype(np.uint8)
        
        # Chuy·ªÉn l·∫°i sang PIL Image
        threshold_image = Image.fromarray(binary_array)
        
        print(f"üéØ Threshold t·ªëi ∆∞u: {threshold}")
        return threshold_image
        
    except Exception as e:
        print(f"Loi khi ap dung threshold: {e}")
        # Fallback: s·ª≠ d·ª•ng threshold c·ªë ƒë·ªãnh
        return image.point(lambda p: 255 if p > 128 else 0)

# ==============================================================================
# L·ªöP X·ª¨ L√ù CH·ªåN V√ôNG M√ÄN H√åNH
# ==============================================================================

class ScreenSelector:
    """L·ªõp x·ª≠ l√Ω vi·ªác v·∫Ω h√¨nh ch·ªØ nh·∫≠t tr√™n m√†n h√¨nh ƒë·ªÉ ch·ªçn v√πng OCR."""
    def __init__(self):
        self.start_x = None
        self.start_y = None
        self.root = None
        self.canvas = None
        self.rect = None

    def start(self):
        """Kh·ªüi t·∫°o v√† hi·ªÉn th·ªã c·ª≠a s·ªï ch·ªçn v√πng."""
        self.root = tk.Tk()
        self.root.attributes('-fullscreen', True)
        self.root.attributes('-alpha', 0.3)
        self.root.attributes('-topmost', True)
        self.root.configure(bg='black')
        self.canvas = tk.Canvas(self.root, bg='black', highlightthickness=0, cursor='crosshair')
        self.canvas.pack(fill=tk.BOTH, expand=True)
        self.canvas.bind('<Button-1>', self.on_press)
        self.canvas.bind('<B1-Motion>', self.on_drag)
        self.canvas.bind('<ButtonRelease-1>', self.on_release)
        self.root.bind('<Escape>', lambda e: self.cancel())
        self.root.mainloop()

    def on_press(self, event):
        """L∆∞u t·ªça ƒë·ªô khi nh·∫•n chu·ªôt."""
        self.start_x = event.x
        self.start_y = event.y

    def on_drag(self, event):
        """V·∫Ω h√¨nh ch·ªØ nh·∫≠t khi k√©o chu·ªôt."""
        if self.start_x is not None:
            if self.rect:
                self.canvas.delete(self.rect)
            self.rect = self.canvas.create_rectangle(
                self.start_x, self.start_y, event.x, event.y, outline='red', width=2)

    def on_release(self, event):
        """X·ª≠ l√Ω khi nh·∫£ chu·ªôt: ch·ª•p ·∫£nh v√† OCR."""
        end_x, end_y = event.x, event.y
        self.root.destroy()
        time.sleep(0.2)

        x1, y1 = min(self.start_x, end_x), min(self.start_y, end_y)
        x2, y2 = max(self.start_x, end_x), max(self.start_y, end_y)

        print(f"V√πng ch·ªçn: ({x1}, {y1}) ‚Üí ({x2}, {y2})")
        if x2 - x1 > 5 and y2 - y1 > 5:
            screenshot = ImageGrab.grab(bbox=(x1, y1, x2, y2))
            self.ocr(screenshot)
        else:
            print("Vung chon qua nho!")

    def cancel(self):
        """H·ªßy thao t√°c ch·ªçn v√πng."""
        print("‚úñ ƒê√£ h·ªßy!")
        self.root.destroy()

    def ocr(self, image):
        """
        Th·ª±c hi·ªán nh·∫≠n d·∫°ng vƒÉn b·∫£n tr√™n ·∫£nh v·ªõi ti·ªÅn x·ª≠ l√Ω t·ªëi ∆∞u.
        """
        try:
            print("\n" + "="*55)
            print("‚è≥ B·∫ÆT ƒê·∫¶U QU√Å TR√åNH OCR")
            print("="*55)
            
            # Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·ªÉ t·ªëi ∆∞u h√≥a OCR
            processed_image = preprocess_image(image)
            
            print("\nüîç ƒêang nh·∫≠n d·∫°ng vƒÉn b·∫£n...")
            
            # C·∫•u h√¨nh Tesseract ƒë·ªÉ t·ªëi ∆∞u cho ti·∫øng Vi·ªát
            custom_config = r'--oem 3 --psm 6'
            # --oem 3: S·ª≠ d·ª•ng LSTM neural network (t·ªët nh·∫•t)
            # --psm 6: Gi·∫£ ƒë·ªãnh vƒÉn b·∫£n l√† m·ªôt kh·ªëi th·ªëng nh·∫•t
            
            # S·ª≠ d·ª•ng 'vie' ƒë·ªÉ nh·∫≠n d·∫°ng ti·∫øng Vi·ªát
            text = pytesseract.image_to_string(
                processed_image, 
                lang='vie',
                config=custom_config
            )
            
            # L√†m s·∫°ch text
            text = text.strip()
            
            if text:
                pyperclip.copy(text)
                print("\n" + "="*55)
                print("HOAN THANH - DA COPY VAO CLIPBOARD!")
                print("="*55)
                
                # Hi·ªÉn th·ªã n·ªôi dung
                if len(text) > 200:
                    print(f"üìù N·ªôi dung (200 k√Ω t·ª± ƒë·∫ßu):\n{text[:200]}...")
                else:
                    print(f"üìù N·ªôi dung:\n{text}")
                    
                print(f"\nüìä ƒê·ªô d√†i: {len(text)} k√Ω t·ª±")
                print(f"üìÑ S·ªë d√≤ng: {text.count(chr(10)) + 1}")
                print("="*55 + "\n")
            else:
                print("\n" + "="*55)
                print("KHONG NHAN DIEN DUOC CHU!")
                print("="*55)
                print("üí° G·ª£i √Ω:")
                print("   ‚Ä¢ Ch·ªçn v√πng c√≥ ch·ªØ r√µ r√†ng h∆°n")
                print("   ‚Ä¢ TƒÉng k√≠ch th∆∞·ªõc v√πng ch·ªçn")
                print("   ‚Ä¢ ƒê·∫£m b·∫£o ch·ªØ c√≥ ƒë·ªô t∆∞∆°ng ph·∫£n t·ªët v·ªõi n·ªÅn")
                print("="*55 + "\n")
                
        except Exception as e:
            print(f"\nLOI KHI NHAN DIEN: {e}\n")

def trigger_ocr_selection():
    """H√†m ƒë∆∞·ª£c g·ªçi khi nh·∫•n ph√≠m t·∫Øt."""
    current_hotkey = hotkey_manager.get_current_hotkey() if hotkey_manager else "unknown"
    print(f"\n‚ñ∂ ƒê√£ nh·∫•n ph√≠m t·∫Øt '{current_hotkey}' - B·∫Øt ƒë·∫ßu ch·ªçn v√πng...")
    Thread(target=lambda: ScreenSelector().start(), daemon=True).start()

# ==============================================================================
# PH·∫¶N QU·∫¢N L√ù C·∫§U H√åNH V√Ä PH√çM T·∫ÆT (ƒê√É CHUY·ªÇN V√ÄO HOTKEY MANAGER)
# ==============================================================================

# ==============================================================================
# PH·∫¶N QU·∫¢N L√ù ICON TR√äN SYSTEM TRAY
# ==============================================================================

def change_hotkey_action():
    """H√†nh ƒë·ªông ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng ch·ªçn 'Thay ƒë·ªïi ph√≠m t·∫Øt'."""
    if hotkey_manager:
        # Ch·∫°y trong thread ri√™ng ƒë·ªÉ tr√°nh block system tray
        Thread(target=hotkey_manager.change_hotkey_from_tray, daemon=True).start()

def exit_action(icon):
    """H√†nh ƒë·ªông tho√°t ·ª©ng d·ª•ng."""
    print("\nDa thoat!")
    cleanup_and_exit()

def setup_and_run_tray_app():
    """Thi·∫øt l·∫≠p v√† ch·∫°y icon tr√™n khay h·ªá th·ªëng."""
    global app_icon
    try:
        if getattr(sys, 'frozen', False):
            base_path = sys._MEIPASS
        else:
            base_path = os.path.abspath(".")
        icon_path = os.path.join(base_path, ICON_FILE)
        image = Image.open(icon_path)
    except FileNotFoundError:
        print(f"Loi: Khong tim thay file '{ICON_FILE}'. Su dung icon mac dinh.")
        image = Image.new('RGB', (64, 64), 'black')

    menu = (
        item('Thay ƒë·ªïi ph√≠m t·∫Øt', change_hotkey_action),
        item('Tho√°t', exit_action)
    )

    current_hotkey = hotkey_manager.get_current_hotkey() if hotkey_manager else "unknown"
    app_icon = Icon("OCRTool", image, f"OCR Tool (Hotkey: {current_hotkey})", menu)
    app_icon.run()

# ==============================================================================
# H√ÄM MAIN CH√çNH
# ==============================================================================

def main():
    global hotkey_manager

    is_startup_run = "--startup" in sys.argv

    set_dpi_awareness()
    
    # Setup signal handlers ƒë·ªÉ cleanup khi app b·ªã terminate
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)

    # ============================================================================
    # KI·ªÇM TRA B·∫¢N QUY·ªÄN TR∆Ø·ªöC KHI CH·∫†Y APP
    # ============================================================================
    try:
        license_manager = LicenseManager()
        
        if not license_manager.check_license():
            print("\n" + "="*60)
            print("KHONG THE KICH HOAT BAN QUYEN")
            print("="*60)
            print("·ª®ng d·ª•ng s·∫Ω tho√°t sau 3 gi√¢y...")
            print("="*60 + "\n")
            
            # Hi·ªÉn th·ªã messagebox n·∫øu kh√¥ng ph·∫£i startup
            if not is_startup_run:
                root = tk.Tk()
                root.withdraw()
                messagebox.showerror(
                    "L·ªói B·∫£n Quy·ªÅn",
                    "Kh√¥ng th·ªÉ k√≠ch ho·∫°t b·∫£n quy·ªÅn!\n\n"
                    "Vui l√≤ng ki·ªÉm tra License Key v√† th·ª≠ l·∫°i."
                )
                root.destroy()
            
            time.sleep(3)
            sys.exit(1)
        
        print("\n" + "="*60)
        print("BAN QUYEN HOP LE - Dang khoi dong ung dung...")
        print("="*60 + "\n")
        
    except Exception as e:
        print(f"\nLoi kiem tra ban quyen: {e}")
        print("·ª®ng d·ª•ng s·∫Ω tho√°t sau 3 gi√¢y...\n")
        time.sleep(3)
        sys.exit(1)
    
    # ============================================================================
    # KH·ªûI T·∫†O HOTKEY MANAGER
    # ============================================================================
    hotkey_manager = HotkeyManager(trigger_callback=trigger_ocr_selection)
    
    # ============================================================================
    # KH·ªûI ƒê·ªòNG ·ª®NG D·ª§NG B√åNH TH∆Ø·ªúNG
    # ============================================================================

    if not is_startup_run:
        print("=" * 55)
        print("    Vietnamese OCR Tool - Optimized Version")
        print("=" * 55)
        print("\nTinh nang toi uu hoa:")
        print("   - Grayscale conversion (chuyen mau xam)")
        print("   - Image upscaling 2x (tang do phan giai)")
        print("   - Contrast enhancement (tang do tuong phan)")
        print("   - Sharpness enhancement (tang do sac net)")
        print("   - Noise reduction (khu nhieu)")
        print("   - Adaptive thresholding (nguong hoa thong minh)")
        print("   - Tesseract LSTM mode (AI nhan dang)")
        print("=" * 55 + "\n")

    # T·∫£i ph√≠m t·∫Øt t·ª´ config ho·∫∑c y√™u c·∫ßu ng∆∞·ªùi d√πng ch·ªçn
    loaded_key = hotkey_manager.load_hotkey()
    
    if not loaded_key:
        hotkey_manager.prompt_for_hotkey()
        loaded_key = hotkey_manager.get_current_hotkey()
    
    # ƒêƒÉng k√Ω ph√≠m t·∫Øt
    if loaded_key:
        hotkey_manager.register_hotkey(loaded_key)
        if not is_startup_run:
            print(f"Da tai phim tat da luu: {loaded_key}")

    if not is_startup_run:
        current_hotkey = hotkey_manager.get_current_hotkey()
        print("\nHuong dan:")
        print(f"    - Nhan '{current_hotkey}' de chon vung can OCR")
        print("    - Nhan ESC de huy chon vung")
        print("    - Chuot phai vao icon o khay he thong de thay doi")
        print("=" * 55 + "\n")
        print("Ung dung dang chay o che do nen...")

    setup_and_run_tray_app()

if __name__ == "__main__":
    main()