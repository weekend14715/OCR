import keyboard
from PIL import Image, ImageGrab, ImageEnhance, ImageFilter
import pytesseract
import pyperclip
import tkinter as tk
from tkinter import font as tkFont, messagebox
from threading import Thread
import ctypes
import time
import configparser
import sys
import os
from pystray import MenuItem as item, Icon
import numpy as np

# Import License Manager
from license import LicenseManager

# --- C·∫§U H√åNH ---

APP_NAME = "VietnameseOCRTool" 
CONFIG_DIR = os.path.join(os.getenv('LOCALAPPDATA'), APP_NAME) 
os.makedirs(CONFIG_DIR, exist_ok=True) 
CONFIG_FILE = os.path.join(CONFIG_DIR, 'config.ini')
ICON_FILE = 'icon.png'

def get_tesseract_path():
    """T√¨m ƒë∆∞·ªùng d·∫´n ƒë·∫øn tesseract.exe m·ªôt c√°ch linh ƒë·ªông."""
    if getattr(sys, 'frozen', False):
        application_path = os.path.dirname(sys.executable)
        tesseract_path = os.path.join(application_path, 'Tesseract-OCR', 'tesseract.exe')
    else:
        tesseract_path = r'C:\Program Files\Tesseract-OCR\tesseract.exe'
    
    print(f"ƒê∆∞·ªùng d·∫´n Tesseract ƒë∆∞·ª£c s·ª≠ d·ª•ng: {tesseract_path}")
    return tesseract_path

try:
    pytesseract.pytesseract.tesseract_cmd = get_tesseract_path()
except Exception as e:
    print(f"L·ªói khi thi·∫øt l·∫≠p Tesseract: {e}")

# --- BI·∫æN TO√ÄN C·ª§C ---
current_hotkey = None
hotkey_handle = None
app_icon = None

# ==============================================================================
# PH·∫¶N X·ª¨ L√ù DPI V√Ä GIAO DI·ªÜN CH·ªåN V√ôNG
# ==============================================================================

def set_dpi_awareness():
    """C·∫£i thi·ªán ƒë·ªô s·∫Øc n√©t c·ªßa giao di·ªán tr√™n m√†n h√¨nh c√≥ ƒë·ªô ph√¢n gi·∫£i cao."""
    try:
        ctypes.windll.shcore.SetProcessDpiAwareness(2)
    except Exception:
        try:
            ctypes.windll.user32.SetProcessDPIAware()
        except Exception:
            pass

# ==============================================================================
# PH·∫¶N TI·ªÄN X·ª¨ L√ù ·∫¢NH T·ªêI ∆ØU
# ==============================================================================

def preprocess_image(image):
    """
    Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·ªÉ t·ªëi ∆∞u h√≥a ch·∫•t l∆∞·ª£ng OCR.
    
    C√°c b∆∞·ªõc x·ª≠ l√Ω:
    1. Chuy·ªÉn sang grayscale (gi·∫£m nhi·ªÖu m√†u)
    2. TƒÉng k√≠ch th∆∞·ªõc ·∫£nh (upscaling) - gi√∫p Tesseract nh·∫≠n d·∫°ng t·ªët h∆°n
    3. C√¢n b·∫±ng histogram (tƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n t·ª± ƒë·ªông)
    4. Kh·ª≠ nhi·ªÖu adaptive
    5. √Åp d·ª•ng adaptive threshold th√¥ng minh
    6. L√†m s·∫°ch nhi·ªÖu salt-and-pepper
    """
    try:
        # B∆∞·ªõc 1: Chuy·ªÉn sang grayscale
        gray_image = image.convert('L')
        print("üé® ƒê√£ chuy·ªÉn ·∫£nh sang m√†u x√°m")
        
        # B∆∞·ªõc 2: Upscaling - tƒÉng k√≠ch th∆∞·ªõc ·∫£nh l√™n 3x (tƒÉng t·ª´ 2x l√™n 3x)
        # Tesseract ho·∫°t ƒë·ªông t·ªët h∆°n v·ªõi ·∫£nh c√≥ ƒë·ªô ph√¢n gi·∫£i cao
        width, height = gray_image.size
        scale_factor = 3
        gray_image = gray_image.resize((width * scale_factor, height * scale_factor), Image.LANCZOS)
        print(f"üìê ƒê√£ tƒÉng k√≠ch th∆∞·ªõc ·∫£nh: {width}x{height} ‚Üí {width*scale_factor}x{height*scale_factor}")
        
        # B∆∞·ªõc 3: C√¢n b·∫±ng histogram ƒë·ªÉ tƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n t·ª± ƒë·ªông
        equalized_image = equalize_histogram(gray_image)
        print("üìä ƒê√£ c√¢n b·∫±ng histogram")
        
        # B∆∞·ªõc 4: TƒÉng ƒë·ªô s·∫Øc n√©t
        sharpness_enhancer = ImageEnhance.Sharpness(equalized_image)
        sharp_image = sharpness_enhancer.enhance(2.5)
        print("‚ú® ƒê√£ tƒÉng ƒë·ªô s·∫Øc n√©t")
        
        # B∆∞·ªõc 5: √Åp d·ª•ng adaptive threshold th√¥ng minh
        threshold_image = apply_adaptive_threshold(sharp_image)
        print("‚ö´‚ö™ ƒê√£ √°p d·ª•ng adaptive threshold")
        
        # B∆∞·ªõc 6: Kh·ª≠ nhi·ªÖu salt-and-pepper (nhi·ªÖu ƒëi·ªÉm tr·∫Øng ƒëen)
        cleaned_image = remove_noise(threshold_image)
        print("üßπ ƒê√£ l√†m s·∫°ch nhi·ªÖu")
        
        # B∆∞·ªõc 7: L√†m m·ªãn vi·ªÅn ch·ªØ (morphological operations)
        final_image = smooth_text(cleaned_image)
        print("üéØ ƒê√£ l√†m m·ªãn vi·ªÅn ch·ªØ")
        
        return final_image
        
    except Exception as e:
        print(f"‚ö† L·ªói khi ti·ªÅn x·ª≠ l√Ω ·∫£nh: {e}")
        # N·∫øu c√≥ l·ªói, tr·∫£ v·ªÅ ·∫£nh grayscale ƒë∆°n gi·∫£n
        return image.convert('L')

def apply_threshold(image):
    """
    √Åp d·ª•ng adaptive threshold ƒë·ªÉ t·∫°o ·∫£nh ƒëen tr·∫Øng r√µ r√†ng.
    S·ª≠ d·ª•ng Otsu's method ƒë·ªÉ t·ª± ƒë·ªông t√¨m ng∆∞·ª°ng t·ªëi ∆∞u.
    """
    try:
        # Chuy·ªÉn PIL Image sang numpy array
        img_array = np.array(image)
        
        # T√≠nh histogram
        hist, bins = np.histogram(img_array.flatten(), bins=256, range=[0, 256])
        
        # Otsu's method ƒë·ªÉ t√¨m threshold t·ªëi ∆∞u
        total_pixels = img_array.size
        current_max = 0
        threshold = 0
        sum_total = np.sum(np.arange(256) * hist)
        sum_background = 0
        weight_background = 0
        
        for i in range(256):
            weight_background += hist[i]
            if weight_background == 0:
                continue
            
            weight_foreground = total_pixels - weight_background
            if weight_foreground == 0:
                break
            
            sum_background += i * hist[i]
            mean_background = sum_background / weight_background
            mean_foreground = (sum_total - sum_background) / weight_foreground
            
            variance_between = weight_background * weight_foreground * \
                             (mean_background - mean_foreground) ** 2
            
            if variance_between > current_max:
                current_max = variance_between
                threshold = i
        
        # √Åp d·ª•ng threshold
        binary_array = np.where(img_array > threshold, 255, 0).astype(np.uint8)
        
        # Chuy·ªÉn l·∫°i sang PIL Image
        threshold_image = Image.fromarray(binary_array)
        
        print(f"üéØ Threshold t·ªëi ∆∞u: {threshold}")
        return threshold_image
        
    except Exception as e:
        print(f"‚ö† L·ªói khi √°p d·ª•ng threshold: {e}")
        # Fallback: s·ª≠ d·ª•ng threshold c·ªë ƒë·ªãnh
        return image.point(lambda p: 255 if p > 128 else 0)

# ==============================================================================
# L·ªöP X·ª¨ L√ù CH·ªåN V√ôNG M√ÄN H√åNH
# ==============================================================================

class ScreenSelector:
    """L·ªõp x·ª≠ l√Ω vi·ªác v·∫Ω h√¨nh ch·ªØ nh·∫≠t tr√™n m√†n h√¨nh ƒë·ªÉ ch·ªçn v√πng OCR."""
    def __init__(self):
        self.start_x = None
        self.start_y = None
        self.root = None
        self.canvas = None
        self.rect = None

    def start(self):
        """Kh·ªüi t·∫°o v√† hi·ªÉn th·ªã c·ª≠a s·ªï ch·ªçn v√πng."""
        self.root = tk.Tk()
        self.root.attributes('-fullscreen', True)
        self.root.attributes('-alpha', 0.3)
        self.root.attributes('-topmost', True)
        self.root.configure(bg='black')
        self.canvas = tk.Canvas(self.root, bg='black', highlightthickness=0, cursor='crosshair')
        self.canvas.pack(fill=tk.BOTH, expand=True)
        self.canvas.bind('<Button-1>', self.on_press)
        self.canvas.bind('<B1-Motion>', self.on_drag)
        self.canvas.bind('<ButtonRelease-1>', self.on_release)
        self.root.bind('<Escape>', lambda e: self.cancel())
        self.root.mainloop()

    def on_press(self, event):
        """L∆∞u t·ªça ƒë·ªô khi nh·∫•n chu·ªôt."""
        self.start_x = event.x
        self.start_y = event.y

    def on_drag(self, event):
        """V·∫Ω h√¨nh ch·ªØ nh·∫≠t khi k√©o chu·ªôt."""
        if self.start_x is not None:
            if self.rect:
                self.canvas.delete(self.rect)
            self.rect = self.canvas.create_rectangle(
                self.start_x, self.start_y, event.x, event.y, outline='red', width=2)

    def on_release(self, event):
        """X·ª≠ l√Ω khi nh·∫£ chu·ªôt: ch·ª•p ·∫£nh v√† OCR."""
        end_x, end_y = event.x, event.y
        self.root.destroy()
        time.sleep(0.2)

        x1, y1 = min(self.start_x, end_x), min(self.start_y, end_y)
        x2, y2 = max(self.start_x, end_x), max(self.start_y, end_y)

        print(f"V√πng ch·ªçn: ({x1}, {y1}) ‚Üí ({x2}, {y2})")
        if x2 - x1 > 5 and y2 - y1 > 5:
            screenshot = ImageGrab.grab(bbox=(x1, y1, x2, y2))
            self.ocr(screenshot)
        else:
            print("‚ö† V√πng ch·ªçn qu√° nh·ªè!")

    def cancel(self):
        """H·ªßy thao t√°c ch·ªçn v√πng."""
        print("‚úñ ƒê√£ h·ªßy!")
        self.root.destroy()

    def ocr(self, image):
        """
        Th·ª±c hi·ªán nh·∫≠n d·∫°ng vƒÉn b·∫£n tr√™n ·∫£nh v·ªõi ti·ªÅn x·ª≠ l√Ω t·ªëi ∆∞u.
        """
        try:
            print("\n" + "="*55)
            print("‚è≥ B·∫ÆT ƒê·∫¶U QU√Å TR√åNH OCR")
            print("="*55)
            
            # Ti·ªÅn x·ª≠ l√Ω ·∫£nh ƒë·ªÉ t·ªëi ∆∞u h√≥a OCR
            processed_image = preprocess_image(image)
            
            print("\nüîç ƒêang nh·∫≠n d·∫°ng vƒÉn b·∫£n...")
            
            # C·∫•u h√¨nh Tesseract ƒë·ªÉ t·ªëi ∆∞u cho ti·∫øng Vi·ªát
            custom_config = r'--oem 3 --psm 6'
            # --oem 3: S·ª≠ d·ª•ng LSTM neural network (t·ªët nh·∫•t)
            # --psm 6: Gi·∫£ ƒë·ªãnh vƒÉn b·∫£n l√† m·ªôt kh·ªëi th·ªëng nh·∫•t
            
            # S·ª≠ d·ª•ng 'vie' ƒë·ªÉ nh·∫≠n d·∫°ng ti·∫øng Vi·ªát
            text = pytesseract.image_to_string(
                processed_image, 
                lang='vie',
                config=custom_config
            )
            
            # L√†m s·∫°ch text
            text = text.strip()
            
            if text:
                pyperclip.copy(text)
                print("\n" + "="*55)
                print("‚úì HO√ÄN TH√ÄNH - ƒê√É COPY V√ÄO CLIPBOARD!")
                print("="*55)
                
                # Hi·ªÉn th·ªã n·ªôi dung
                if len(text) > 200:
                    print(f"üìù N·ªôi dung (200 k√Ω t·ª± ƒë·∫ßu):\n{text[:200]}...")
                else:
                    print(f"üìù N·ªôi dung:\n{text}")
                    
                print(f"\nüìä ƒê·ªô d√†i: {len(text)} k√Ω t·ª±")
                print(f"üìÑ S·ªë d√≤ng: {text.count(chr(10)) + 1}")
                print("="*55 + "\n")
            else:
                print("\n" + "="*55)
                print("‚ö† KH√îNG NH·∫¨N DI·ªÜN ƒê∆Ø·ª¢C CH·ªÆ!")
                print("="*55)
                print("üí° G·ª£i √Ω:")
                print("   ‚Ä¢ Ch·ªçn v√πng c√≥ ch·ªØ r√µ r√†ng h∆°n")
                print("   ‚Ä¢ TƒÉng k√≠ch th∆∞·ªõc v√πng ch·ªçn")
                print("   ‚Ä¢ ƒê·∫£m b·∫£o ch·ªØ c√≥ ƒë·ªô t∆∞∆°ng ph·∫£n t·ªët v·ªõi n·ªÅn")
                print("="*55 + "\n")
                
        except Exception as e:
            print(f"\n‚ùå L·ªñI KHI NH·∫¨N DI·ªÜN: {e}\n")

def trigger_ocr_selection():
    """H√†m ƒë∆∞·ª£c g·ªçi khi nh·∫•n ph√≠m t·∫Øt."""
    print(f"\n‚ñ∂ ƒê√£ nh·∫•n ph√≠m t·∫Øt '{current_hotkey}' - B·∫Øt ƒë·∫ßu ch·ªçn v√πng...")
    Thread(target=lambda: ScreenSelector().start(), daemon=True).start()

# ==============================================================================
# GIAO DI·ªÜN Y√äU C·∫¶U NH·∫¨P PH√çM T·∫ÆT
# ==============================================================================

class HotkeySelectorWindow:
    """T·∫°o c·ª≠a s·ªï ch·ªçn ph√≠m t·∫Øt v·ªõi c√°c t√πy ch·ªçn c√≥ s·∫µn."""
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Ch·ªçn ph√≠m t·∫Øt OCR")
        self.root.attributes('-topmost', True)
        self.root.geometry("500x450")
        self.root.configure(bg="#2c3e50")
        self.root.resizable(False, False)
        
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (500 // 2)
        y = (self.root.winfo_screenheight() // 2) - (450 // 2)
        self.root.geometry(f"500x450+{x}+{y}")
        
        self.selected_hotkey = None
        self.setup_ui()
    
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ng∆∞·ªùi d√πng."""
        title_font = tkFont.Font(family="Arial", size=16, weight="bold")
        button_font = tkFont.Font(family="Arial", size=12, weight="bold")
        desc_font = tkFont.Font(family="Arial", size=10)
        
        title_label = tk.Label(
            self.root,
            text="üéØ CH·ªåN PH√çM T·∫ÆT CHO OCR TOOL",
            font=title_font,
            bg="#2c3e50",
            fg="#ecf0f1"
        )
        title_label.pack(pady=20)
        
        desc_label = tk.Label(
            self.root,
            text="Ch·ªçn m·ªôt trong c√°c t√πy ch·ªçn b√™n d∆∞·ªõi:",
            font=desc_font,
            bg="#2c3e50",
            fg="#bdc3c7"
        )
        desc_label.pack(pady=(0, 20))
        
        button_frame = tk.Frame(self.root, bg="#2c3e50")
        button_frame.pack(expand=True, fill="both", padx=30, pady=10)
        
        hotkey_options = [
            {"key": "ctrl+q", "name": "Ctrl + Q", "desc": "T·ªï h·ª£p ph√≠m ph·ªï bi·∫øn, d·ªÖ nh·ªõ"},
            {"key": "alt+space", "name": "Alt + Space", "desc": "Nhanh g·ªçn, kh√¥ng xung ƒë·ªôt"},
            {"key": "ctrl+shift+c", "name": "Ctrl + Shift + C", "desc": "Ph√≠m t·∫Øt chuy√™n nghi·ªáp"}
        ]
        
        for option in hotkey_options:
            btn_frame = tk.Frame(button_frame, bg="#34495e", relief="raised", bd=2)
            btn_frame.pack(fill="x", pady=5)
            
            btn = tk.Button(
                btn_frame,
                text=f"{option['name']}",
                font=button_font,
                bg="#3498db",
                fg="white",
                relief="flat",
                command=lambda k=option['key']: self.select_hotkey(k)
            )
            btn.pack(fill="x", padx=5, pady=5)
            
            desc_btn = tk.Label(
                btn_frame,
                text=option['desc'],
                font=desc_font,
                bg="#34495e",
                fg="#bdc3c7"
            )
            desc_btn.pack(pady=(0, 5))
        
        # N√∫t nh·∫•n ph√≠m t√πy √Ω
        press_frame = tk.Frame(button_frame, bg="#9b59b6", relief="raised", bd=2)
        press_frame.pack(fill="x", pady=(10, 5))
        
        press_btn = tk.Button(
            press_frame,
            text="‚å®Ô∏è NH·∫§N PH√çM T√ôY √ù",
            font=button_font,
            bg="#9b59b6",
            fg="white",
            relief="flat",
            command=self.select_press_hotkey
        )
        press_btn.pack(fill="x", padx=5, pady=5)
        
        press_desc = tk.Label(
            press_frame,
            text="Nh·∫•n n√∫t r·ªìi g√µ t·ªï h·ª£p ph√≠m b·∫°n mu·ªën",
            font=desc_font,
            bg="#9b59b6",
            fg="white"
        )
        press_desc.pack(pady=(0, 5))
    
    def select_hotkey(self, hotkey):
        """Ch·ªçn ph√≠m t·∫Øt c√≥ s·∫µn."""
        self.selected_hotkey = hotkey
        self.root.destroy()
    
    def select_press_hotkey(self):
        """Ch·ªçn ph√≠m t·∫Øt b·∫±ng c√°ch nh·∫•n ph√≠m t√πy √Ω."""
        self.root.destroy()
        press_window = PressHotkeyWindow()
        self.selected_hotkey = press_window.get_hotkey()
    
    def get_hotkey(self):
        """Hi·ªÉn th·ªã c·ª≠a s·ªï v√† tr·∫£ v·ªÅ ph√≠m t·∫Øt ƒë∆∞·ª£c ch·ªçn."""
        self.root.mainloop()
        return self.selected_hotkey

class PressHotkeyWindow:
    """C·ª≠a s·ªï nh·∫•n ph√≠m t√πy √Ω."""
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("Nh·∫•n ph√≠m t√πy √Ω")
        self.root.attributes('-topmost', True)
        self.root.geometry("500x300")
        self.root.configure(bg="#2c3e50")
        self.root.resizable(False, False)
        
        self.root.update_idletasks()
        x = (self.root.winfo_screenwidth() // 2) - (500 // 2)
        y = (self.root.winfo_screenheight() // 2) - (300 // 2)
        self.root.geometry(f"500x300+{x}+{y}")
        
        self.setup_ui()
        self.hotkey = None
    
    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán."""
        title_font = tkFont.Font(family="Arial", size=16, weight="bold")
        button_font = tkFont.Font(family="Arial", size=12)
        desc_font = tkFont.Font(family="Arial", size=11)
        
        title_label = tk.Label(
            self.root,
            text="‚å®Ô∏è NH·∫§N PH√çM T√ôY √ù",
            font=title_font,
            bg="#2c3e50",
            fg="#ecf0f1"
        )
        title_label.pack(pady=20)
        
        desc_label = tk.Label(
            self.root,
            text="Nh·∫•n t·ªï h·ª£p ph√≠m b·∫°n mu·ªën s·ª≠ d·ª•ng:",
            font=desc_font,
            bg="#2c3e50",
            fg="#bdc3c7"
        )
        desc_label.pack(pady=(0, 20))
        
        self.status_label = tk.Label(
            self.root,
            text="ƒêang ch·ªù b·∫°n nh·∫•n ph√≠m...",
            font=desc_font,
            bg="#2c3e50",
            fg="#f39c12"
        )
        self.status_label.pack(pady=10)
        
        button_frame = tk.Frame(self.root, bg="#2c3e50")
        button_frame.pack(pady=20)
        
        cancel_btn = tk.Button(
            button_frame,
            text="‚ùå H·ª¶Y",
            font=button_font,
            bg="#e74c3c",
            fg="white",
            relief="flat",
            command=self.cancel,
            width=15,
            height=2
        )
        cancel_btn.pack(padx=10)
        
        # T·ª± ƒë·ªông b·∫Øt ƒë·∫ßu l·∫Øng nghe sau khi UI ƒë√£ s·∫µn s√†ng
        self.root.after(100, self.start_listening)
    
    def start_listening(self):
        """B·∫Øt ƒë·∫ßu l·∫Øng nghe ph√≠m t·∫Øt."""
        self.status_label.config(text="ƒêang ch·ªù b·∫°n nh·∫•n ph√≠m...", fg="#f39c12")
        self.root.update()
        
        try:
            hotkey = keyboard.read_hotkey(suppress=False)
            self.hotkey = hotkey
            self.status_label.config(text=f"ƒê√£ nh·∫≠n ph√≠m t·∫Øt: {hotkey}", fg="#27ae60")
            self.root.update()
            self.root.after(2000, self.root.destroy)
            
        except Exception as e:
            self.status_label.config(text=f"L·ªói: {str(e)}", fg="#e74c3c")
            self.root.update()
            self.root.after(3000, self.root.destroy)
    
    def get_hotkey(self):
        """L·∫•y ph√≠m t·∫Øt t·ª´ ng∆∞·ªùi d√πng."""
        self.root.mainloop()
        return self.hotkey
    
    def cancel(self):
        """H·ªßy nh·∫≠p ph√≠m t·∫Øt."""
        self.hotkey = None
        self.root.destroy()

# ==============================================================================
# PH·∫¶N QU·∫¢N L√ù C·∫§U H√åNH V√Ä PH√çM T·∫ÆT
# ==============================================================================

def save_hotkey(hotkey_str):
    """L∆∞u ph√≠m t·∫Øt v√†o file config.ini."""
    config = configparser.ConfigParser()
    config['Settings'] = {'hotkey': hotkey_str}
    with open(CONFIG_FILE, 'w', encoding='utf-8') as configfile:
        config.write(configfile)
    print(f"‚úì ƒê√£ l∆∞u ph√≠m t·∫Øt m·ªõi: {hotkey_str}")

def load_hotkey():
    """T·∫£i ph√≠m t·∫Øt t·ª´ file config.ini."""
    if not os.path.exists(CONFIG_FILE):
        return None
    config = configparser.ConfigParser()
    config.read(CONFIG_FILE, encoding='utf-8')
    return config.get('Settings', 'hotkey', fallback=None)

def prompt_for_hotkey():
    """Hi·ªÉn th·ªã giao di·ªán ch·ªçn ph√≠m t·∫Øt."""
    print("\n" + "="*55)
    print("‚ú® VUI L√íNG CH·ªåN PH√çM T·∫ÆT ‚ú®")
    print("="*55)

    selector = HotkeySelectorWindow()
    new_hotkey = selector.get_hotkey()

    if new_hotkey:
        print(f"\n‚úì B·∫°n ƒë√£ ch·ªçn: {new_hotkey}")
        save_hotkey(new_hotkey)
        return new_hotkey
    else:
        # N·∫øu kh√¥ng ch·ªçn ƒë∆∞·ª£c, d√πng m·∫∑c ƒë·ªãnh
        default_hotkey = "ctrl+q"
        print(f"\n‚ö† S·ª≠ d·ª•ng ph√≠m t·∫Øt m·∫∑c ƒë·ªãnh: {default_hotkey}")
        save_hotkey(default_hotkey)
        return default_hotkey

def register_new_hotkey(new_hotkey):
    """H·ªßy ph√≠m t·∫Øt c≈© v√† ƒëƒÉng k√Ω ph√≠m t·∫Øt m·ªõi."""
    global current_hotkey, hotkey_handle
    if hotkey_handle:
        keyboard.remove_hotkey(hotkey_handle)

    current_hotkey = new_hotkey
    hotkey_handle = keyboard.add_hotkey(current_hotkey, trigger_ocr_selection)

    if app_icon:
        app_icon.title = f"OCR Tool (Hotkey: {current_hotkey})"

# ==============================================================================
# PH·∫¶N QU·∫¢N L√ù ICON TR√äN SYSTEM TRAY
# ==============================================================================

def change_hotkey_action():
    """H√†nh ƒë·ªông ƒë∆∞·ª£c g·ªçi khi ng∆∞·ªùi d√πng ch·ªçn 'Thay ƒë·ªïi ph√≠m t·∫Øt'."""
    print("\nüîÑ B·∫Øt ƒë·∫ßu thay ƒë·ªïi ph√≠m t·∫Øt...")
    new_hotkey = prompt_for_hotkey()
    register_new_hotkey(new_hotkey)

def exit_action(icon):
    """H√†nh ƒë·ªông tho√°t ·ª©ng d·ª•ng."""
    print("\nüëã ƒê√£ tho√°t!")
    icon.stop()
    os._exit(0)

def setup_and_run_tray_app():
    """Thi·∫øt l·∫≠p v√† ch·∫°y icon tr√™n khay h·ªá th·ªëng."""
    global app_icon
    try:
        if getattr(sys, 'frozen', False):
            base_path = sys._MEIPASS
        else:
            base_path = os.path.abspath(".")
        icon_path = os.path.join(base_path, ICON_FILE)
        image = Image.open(icon_path)
    except FileNotFoundError:
        print(f"‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y file '{ICON_FILE}'. S·ª≠ d·ª•ng icon m·∫∑c ƒë·ªãnh.")
        image = Image.new('RGB', (64, 64), 'black')

    menu = (
        item('Thay ƒë·ªïi ph√≠m t·∫Øt', change_hotkey_action),
        item('Tho√°t', exit_action)
    )

    app_icon = Icon("OCRTool", image, f"OCR Tool (Hotkey: {current_hotkey})", menu)
    app_icon.run()

# ==============================================================================
# H√ÄM MAIN CH√çNH
# ==============================================================================

def main():
    global current_hotkey

    is_startup_run = "--startup" in sys.argv

    set_dpi_awareness()

    # ============================================================================
    # KI·ªÇM TRA B·∫¢N QUY·ªÄN TR∆Ø·ªöC KHI CH·∫†Y APP
    # ============================================================================
    try:
        license_manager = LicenseManager()
        
        if not license_manager.check_license():
            print("\n" + "="*60)
            print("‚ùå KH√îNG TH·ªÇ K√çCH HO·∫†T B·∫¢N QUY·ªÄN")
            print("="*60)
            print("·ª®ng d·ª•ng s·∫Ω tho√°t sau 3 gi√¢y...")
            print("="*60 + "\n")
            
            # Hi·ªÉn th·ªã messagebox n·∫øu kh√¥ng ph·∫£i startup
            if not is_startup_run:
                root = tk.Tk()
                root.withdraw()
                messagebox.showerror(
                    "L·ªói B·∫£n Quy·ªÅn",
                    "Kh√¥ng th·ªÉ k√≠ch ho·∫°t b·∫£n quy·ªÅn!\n\n"
                    "Vui l√≤ng ki·ªÉm tra License Key v√† th·ª≠ l·∫°i."
                )
                root.destroy()
            
            time.sleep(3)
            sys.exit(1)
        
        print("\n" + "="*60)
        print("‚úÖ B·∫¢N QUY·ªÄN H·ª¢P L·ªÜ - ƒêang kh·ªüi ƒë·ªông ·ª©ng d·ª•ng...")
        print("="*60 + "\n")
        
    except Exception as e:
        print(f"\n‚ùå L·ªói ki·ªÉm tra b·∫£n quy·ªÅn: {e}")
        print("·ª®ng d·ª•ng s·∫Ω tho√°t sau 3 gi√¢y...\n")
        time.sleep(3)
        sys.exit(1)
    
    # ============================================================================
    # KH·ªûI ƒê·ªòNG ·ª®NG D·ª§NG B√åNH TH∆Ø·ªúNG
    # ============================================================================

    if not is_startup_run:
        print("=" * 55)
        print("    Vietnamese OCR Tool - Optimized Version")
        print("=" * 55)
        print("\nüöÄ T√≠nh nƒÉng t·ªëi ∆∞u h√≥a:")
        print("   ‚úì Grayscale conversion (chuy·ªÉn m√†u x√°m)")
        print("   ‚úì Image upscaling 2x (tƒÉng ƒë·ªô ph√¢n gi·∫£i)")
        print("   ‚úì Contrast enhancement (tƒÉng ƒë·ªô t∆∞∆°ng ph·∫£n)")
        print("   ‚úì Sharpness enhancement (tƒÉng ƒë·ªô s·∫Øc n√©t)")
        print("   ‚úì Noise reduction (kh·ª≠ nhi·ªÖu)")
        print("   ‚úì Adaptive thresholding (ng∆∞·ª°ng h√≥a th√¥ng minh)")
        print("   ‚úì Tesseract LSTM mode (AI nh·∫≠n d·∫°ng)")
        print("=" * 55 + "\n")

    loaded_key = load_hotkey()
    
    if not loaded_key:
        change_hotkey_action()
    else:
        current_hotkey = loaded_key
        if not is_startup_run:
            print(f"‚úì ƒê√£ t·∫£i ph√≠m t·∫Øt ƒë√£ l∆∞u: {current_hotkey}")
        register_new_hotkey(current_hotkey)

    if not is_startup_run:
        print("\nüìñ H∆∞·ªõng d·∫´n:")
        print(f"    ‚Ä¢ Nh·∫•n '{current_hotkey}' ƒë·ªÉ ch·ªçn v√πng c·∫ßn OCR")
        print("    ‚Ä¢ Nh·∫•n ESC ƒë·ªÉ h·ªßy ch·ªçn v√πng")
        print("    ‚Ä¢ Chu·ªôt ph·∫£i v√†o icon ·ªü khay h·ªá th·ªëng ƒë·ªÉ thay ƒë·ªïi")
        print("=" * 55 + "\n")
        print("üöÄ ·ª®ng d·ª•ng ƒëang ch·∫°y ·ªü ch·∫ø ƒë·ªô n·ªÅn...")

    setup_and_run_tray_app()

if __name__ == "__main__":
    main()